One complex type extending another extending another

=================================== PROGRAM ====================================
genbindings -c
==================================== INPUT =====================================
<?xml version="1.0"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:complexType name="super">
    <xsd:sequence>
      <xsd:element name="a" type="xsd:int"/>
      <xsd:element name="b" type="xsd:int"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="sub">
    <xsd:complexContent>
      <xsd:extension base="super">
        <xsd:sequence>
          <xsd:element name="c" type="xsd:byte"/>
          <xsd:element name="d" type="xsd:short"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="subsub">
    <xsd:complexContent>
      <xsd:extension base="sub">
        <xsd:choice>
          <xsd:element name="e" type="xsd:byte"/>
          <xsd:element name="f" type="xsd:short"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
==================================== OUTPUT ====================================
typedef struct XMLsuper XMLsuper;
typedef struct XMLsub XMLsub;
typedef struct XMLsubsub XMLsubsub;

struct XMLsuper {
  int a;
  int b;
} __attribute__((__packed__));
/* complex type - 8 bytes */

struct XMLsub {
  XMLsuper base;
  char c;
  short d;
} __attribute__((__packed__));
/* complex type - 11 bytes */

#define XMLsubsub_e 1
#define XMLsubsub_f 2

struct XMLsubsub {
  XMLsub base;
  int valtype;
  union {
    char e;
    short f;
  } val;
} __attribute__((__packed__));
/* complex type - 17 bytes */

================================== RETURN CODE =================================
0
