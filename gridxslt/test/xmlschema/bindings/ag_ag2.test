Attribute group with multiple attribute group references

=================================== PROGRAM ====================================
genbindings -c
==================================== INPUT =====================================
<?xml version="1.0"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:attributeGroup name="agroup">
    <xsd:attribute name="a" type="xsd:int"/>
    <xsd:attribute name="b" type="xsd:int"/>
    <xsd:attribute name="c" type="xsd:int"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="thegroup">
    <xsd:attribute name="d" type="xsd:int"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="othergroup">
    <xsd:attribute name="e" type="xsd:int"/>
    <xsd:attribute name="f" type="xsd:int"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="test">
    <xsd:attributeGroup ref="agroup"/>
    <xsd:attributeGroup ref="thegroup"/>
    <xsd:attributeGroup ref="othergroup"/>
  </xsd:attributeGroup>
</xsd:schema>
==================================== OUTPUT ====================================
typedef struct XMLagroup XMLagroup;
typedef struct XMLthegroup XMLthegroup;
typedef struct XMLothergroup XMLothergroup;
typedef struct XMLtest XMLtest;

struct XMLagroup {
  int a;
  int b;
  int c;
} __attribute__((__packed__));
/* attribute group - 12 bytes */

struct XMLthegroup {
  int d;
} __attribute__((__packed__));
/* attribute group - 4 bytes */

struct XMLothergroup {
  int e;
  int f;
} __attribute__((__packed__));
/* attribute group - 8 bytes */

struct XMLtest {
  XMLagroup agroup;
  XMLthegroup thegroup;
  XMLothergroup othergroup;
} __attribute__((__packed__));
/* attribute group - 24 bytes */

================================== RETURN CODE =================================
0
