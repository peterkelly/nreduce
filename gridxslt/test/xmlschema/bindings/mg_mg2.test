Complex type with multiple model group references

=================================== PROGRAM ====================================
genbindings -c
==================================== INPUT =====================================
<?xml version="1.0"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:group name="test">
    <xsd:sequence>
      <xsd:group ref="agroup"/>
      <xsd:group ref="thegroup"/>
      <xsd:group ref="othergroup"/>
    </xsd:sequence>
  </xsd:group>
  <xsd:group name="agroup">
    <xsd:sequence>
      <xsd:element name="a" type="xsd:int"/>
      <xsd:element name="b" type="xsd:int"/>
      <xsd:element name="c" type="xsd:int"/>
    </xsd:sequence>
  </xsd:group>
  <xsd:group name="thegroup">
    <xsd:sequence>
      <xsd:element name="d" type="xsd:int"/>
    </xsd:sequence>
  </xsd:group>
  <xsd:group name="othergroup">
    <xsd:sequence>
      <xsd:element name="e" type="xsd:int"/>
      <xsd:element name="f" type="xsd:int"/>
    </xsd:sequence>
  </xsd:group>
</xsd:schema>
==================================== OUTPUT ====================================
typedef struct XMLagroup XMLagroup;
typedef struct XMLthegroup XMLthegroup;
typedef struct XMLothergroup XMLothergroup;
typedef struct XMLtest XMLtest;

struct XMLagroup {
  int a;
  int b;
  int c;
} __attribute__((__packed__));
/* model group - 12 bytes */

struct XMLthegroup {
  int d;
} __attribute__((__packed__));
/* model group - 4 bytes */

struct XMLothergroup {
  int e;
  int f;
} __attribute__((__packed__));
/* model group - 8 bytes */

struct XMLtest {
  XMLagroup agroup;
  XMLthegroup thegroup;
  XMLothergroup othergroup;
} __attribute__((__packed__));
/* model group - 24 bytes */

================================== RETURN CODE =================================
0
