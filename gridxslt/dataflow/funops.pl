#!/usr/bin/perl -w


@opdefs = ();

@decimaldefs = ();
@integerdefs = ();
@floatdefs = ();
@doubledefs = ();

sub get_argtype
{
  my $str = $_[0];
  $str =~ s/^.*?\s+as\s+//;
  if ($str =~ /(.*?)([\*\+\?]?)$/) {
    my $name = $1;
    my $occ = $2;
    if ($name eq "string") {
      $name = "xs:string";
    }
    $name =~ s/-/_/g;
    my $seqtype = { 'name' => $name, 'occ' => $occ };
    return $seqtype;
  }
  return { 'name' => "xxxxxxxxx", 'occ' => "xxxxxxxxxxxx" };
}

sub get_arg_types
{
  $str = $_[0];
  @argdefs = ();
  foreach $argstr (split(/,/,$str)) {
    if ($argstr !~ /\.\.\./) {
      push(@argdefs,get_argtype($argstr));
    }
  }
  return @argdefs;
}

sub seqtype_str
{
  $seqtype = $_[0];

    my $typename = $$seqtype{"name"};
    $typename =~ s/:/_/;
    $typename =~ tr/a-z/A-Z/;
    $typename =~ s/\(\)//;
    my $occ = $$seqtype{"occ"};


    my $occstr = "OCCURS_ONCE";
    if ($occ eq "*") {
      $occstr = "OCCURS_ZERO_OR_MORE";
    }
    elsif ($occ eq "+") {
      $occstr = "OCCURS_ONE_OR_MORE";
    }
    elsif ($occ eq "?") {
      $occstr = "OCCURS_OPTIONAL";
    }


  return sprintf("{TYPE_%s, %s}",$typename,$occstr);
}






$val = 1;
$section = 0;
$index = 0;
$numericindex = -1;
open(INPUT,"funops.txt") || die "Can't open funops.txt";
while ($line = <INPUT>) {
  if ($line =~ /^(\d+)\s/) {
    $section = $1;
    $line =~ s/\n//;
    if ($section eq "6") {
      $numericindex = $index;
    }
  }
#  elsif ($line =~ /^\s+(fn|op):([A-Za-z0-9-]+)\(.*$/) {
  elsif ($line =~ /^\s+(fn|op):([A-Za-z0-9-]+)\((.*?)\) as (.*)$/) {
    $funop = $1;
    $name = $2;
    $args = $3;
    $ret = $4;
    my @alist = get_arg_types($args);
    if ($section eq "6") {
      my $name2 = $name;
      $name2 =~ s/numeric-//;
      push(@decimaldefs,{ 'funop' => $funop,
                            'name' => "decimal-".$name2,
                      'args' => \@alist,
                      'ret' => get_argtype($ret) });
      push(@integerdefs,{ 'funop' => $funop,
                            'name' => "integer-".$name2,
                      'args' => \@alist,
                      'ret' => get_argtype($ret) });
      push(@floatdefs,{ 'funop' => $funop,
                          'name' => "float-".$name2,
                      'args' => \@alist,
                      'ret' => get_argtype($ret) });
      push(@doubledefs,{ 'funop' => $funop,
                          'name' => "double-".$name2,
                      'args' => \@alist,
                      'ret' => get_argtype($ret) });

    }

    push(@opdefs,{ 'funop' => $funop,
                    'name' => $name,
                    'args' => \@alist,
                    'ret' => get_argtype($ret) });
    $index++;
  }
}
close(INPUT);

@numericdefs = ();

push(@numericdefs,@decimaldefs);
push(@numericdefs,@integerdefs);
push(@numericdefs,@floatdefs);
push(@numericdefs,@doubledefs);

splice(@opdefs,$numericindex,0,@numericdefs);

#for ($i = 0; $i <= $#opdefs; $i++) {
foreach $opdef (@opdefs) {
#  my $opdef = $opdefs[$i];
#printf("i = %d, name = %s\n",$i,$opdef{'name'});
    if (defined($havenames{$$opdef{'name'}})) {
      $num = $havenames{$$opdef{'name'}};
      $num++;
      $havenames{$$opdef{'name'}} = $num;
      $$opdef{'name'} .= $num;
    }
    else {
      $havenames{$$opdef{'name'}} = 1;
    }


}

open(HEADER,">funops.h") || die "Can't write to funops.h\n";

print HEADER "/* This file was automatically generated by funops.pl. Do not edit! */\n";
print HEADER "#ifndef _DATAFLOW_FUNOPS_H\n";
print HEADER "#define _DATAFLOW_FUNOPS_H\n";
print HEADER "\n";
print HEADER "#include \"dataflow.h\"\n";
print HEADER "\n";

printf HEADER "%-60s %d\n","#define FN_OP_INVALID",0;

foreach $opdef (@opdefs) {
  $funop = $$opdef{'funop'};
  $name = $$opdef{'name'};

  $name =~ s/-/_/g;
  $s = "#define ".uc($funop)."_".uc($name);
  printf HEADER "%-60s %d\n",$s,$val++;
}

printf HEADER "%-60s %d\n","#define FN_OP_COUNT",$val;

print HEADER "\n";

print HEADER "#ifndef _DATAFLOW_FUNOPS_C\n";
print HEADER "extern const df_opdef df_opdefs[FN_OP_COUNT];\n";
print HEADER "#endif\n";


print HEADER "\n";
print HEADER "#endif /* _DATAFLOW_FUNOPS_H */\n";
print HEADER "\n";

close(HEADER);



open(CFILE,">funops.c") || die "Can't write to funops.c\n";

print CFILE "/* This file was automatically generated by funops.pl. Do not edit! */\n";
print CFILE "#define _DATAFLOW_FUNOPS_C\n";
print CFILE "#include \"funops.h\"\n";
print CFILE "\n";
print CFILE "const df_opdef df_opdefs[FN_OP_COUNT] = {\n";

print CFILE "{\"<invalid>\", 0, {TYPE_INVALID, OCCURS_ONCE}, {}},\n";


foreach $opdef (@opdefs) {
  @args = @{$$opdef{'args'}};
  printf CFILE "{\"%s\", %d,\n  %s,\n  {",$$opdef{'name'},$#args+1,seqtype_str($$opdef{'ret'});
  for ($i = 0; $i <= $#args; $i++) {
    my $seqtype = $args[$i];
    printf CFILE "%s",seqtype_str($seqtype);
    if ($i < $#args) {
      printf CFILE ",\n   ";
    }
  }
  printf CFILE "}},\n";
}
print CFILE "};\n";
print CFILE "\n";

close(CFILE);
