// FIXME: properly quote special characters like < when producing output

XML_DECL = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"

WSDL_NS = "http://schemas.xmlsoap.org/wsdl/"
SOAP_NS = "http://schemas.xmlsoap.org/wsdl/soap/"
SOAPENV_NS ="http://schemas.xmlsoap.org/soap/envelope/"
XSD_NS = "http://www.w3.org/2001/XMLSchema"
XSI_NS = "http://www.w3.org/2001/XMLSchema-instance"
XMLNS_NS = "http://www.w3.org/2000/xmlns/"

TYPE_STRING     = 0
TYPE_BOOLEAN    = 1
TYPE_NUMBER     = 2
TYPE_QNAME      = 3
UNTYPED_ATOMIC  = 4

MAX_ATOMIC_TYPE = 4

TYPE_ELEMENT    = 5
TYPE_TEXT       = 6
TYPE_COMMENT    = 7
TYPE_ATTRIBUTE  = 8
TYPE_NAMESPACE  = 9
TYPE_DOCUMENT   = 10

TYPE_ERROR      = 11

TOKEN_STARTELEM = 0
TOKEN_ENDELEM = 1
TOKEN_TEXT = 2
TOKEN_ATTRNAME = 3
TOKEN_ATTRVALUE = 4
TOKEN_COMMENT = 5

TOKEN_NAMES = "STARTELEM", "ENDELEM", "TEXT", "ATTRNAME", "ATTRVALUE", "COMMENT", nil

//==================================================================================================
// Items

/*

Field usage:

String      type value
Boolean     type value
Number      type value
QName       type                        nsuri nsprefix localname
Untyped     type value
            
Element     type       parent prev next nsuri nsprefix localname attributes namespaces children
Text        type value parent prev next
Comment     type value parent prev next
Attribute   type value                  nsuri nsprefix localname
Namespace   type                        nsuri nsprefix
Document    type                                                                       children

*/

mkatom type value =
(cons type (cons value nil))

/*
mkitem type value root parent prev next nsuri nsprefix localname attributes namespaces children =
(cons type (cons value
(cons root
(cons parent (cons prev (cons next
(cons nsuri (cons nsprefix (cons localname
(cons attributes (cons namespaces (cons children
(cons (genid nil) nil)))))))))))))
*/

mkitem type value root parent prev next nsuri nsprefix localname attributes namespaces children =
(cons type (cons value
(cons root
(cons parent (cons prev (cons next
(cons nsuri (cons nsprefix (cons localname
(cons attributes (cons namespaces (cons children
(cons (genid nil) (cons (compute_index prev parent) nil))))))))))))))

item_type x       = (head x)
item_value x      = (item 1 x)

item_root x       = (item 2 x)

item_parent x     = (item 3 x)
item_prev x       = (item 4 x)
item_next x       = (item 5 x)

item_nsuri x      = (item 6 x)
item_nsprefix x   = (item 7 x)
item_localname x  = (item 8 x)

item_attributes x = (item 9 x)
item_namespaces x = (item 10 x)
item_children x   = (item 11 x)

item_id x         = (item 12 x)
item_index x      = (item 13 x)

mkstring str =
(mkatom TYPE_STRING str)

mkuntyped val =
(mkatom UNTYPED_ATOMIC val)

mknumber num =
(mkatom TYPE_NUMBER num)

mkbool b =
(mkatom TYPE_BOOLEAN b)

mkelem root parent prev next nsuri nsprefix localname attributes namespaces children =
(mkitem TYPE_ELEMENT nil root parent prev next nsuri nsprefix localname attributes namespaces children)

/* FIXME: should text and comment nodes have a root pointer as well? */
mktext2 value parent prev next =
(mkitem TYPE_TEXT value nil parent prev next nil nil nil nil nil nil)

mktext value =
(mktext2 value nil nil nil)

mkcomment2 value parent prev next =
(mkitem TYPE_COMMENT value nil parent prev next nil nil nil nil nil nil)

mkcomment value =
(mkcomment2 value nil nil nil)

mkattr root parent prev next nsuri nsprefix localname value =
(mkitem TYPE_ATTRIBUTE value root parent prev next nsuri nsprefix localname nil nil nil)

mknamespace nsuri nsprefix =
(mkitem TYPE_NAMESPACE nil nil nil nil nil nsuri nsprefix nil nil nil nil)

mkdoc children =
(letrec
  doc = (mkitem TYPE_DOCUMENT nil doc nil nil nil nil nil nil nil nil children)
 in
  doc)

mkqname nsuri nsprefix localname =
(mkitem TYPE_QNAME nil nil nil nil nil nsuri nsprefix localname nil nil nil)

/* FIXME: this should take attributes (and namespaces?) into account, because these are part
   of the document order */
compute_index prev parent =
(letrec

  last = (!lst.
    (if lst
      (if (tail lst)
        (last (tail lst))
        (head lst))
      nil))

  last_descendant = (!node.
    (letrec
      children = (item_children node)
      lastchild = (last children)
     in
      (if lastchild
        (last_descendant lastchild)
        (+ 1 (item_index node)))))
 in
  (if prev
    (last_descendant prev)
    (if parent
      (+ 1 (item_index parent))
      0)))

//==================================================================================================
// xml::tokenize stream
//
// This function is used internally by the XML parser. It takes a stream of data representing an
// XML document, and converts it into a list of tokens. Each token is a cons pair with the head
// containing the token type (one of the TOKEN_* constants), and the tail set to a string value.
// This token stream is interpreted by the parser to build up a tree of XML nodes.
//
// Possible token types are: STARTELEM, ENDELEM, TEXT, ATTRNAME, ATTRVALUE
//
// States of the tokenizer are: main, pi, piend, skipspace, namestart, name, endname, leafend,
// attrsearch, attrname, eqsearch, valsearch, and value.
//
// The tokenizer is implemented as a state machine, with each state represented by a different
// function. In each state, the tokenizer first checks if there is any more data in the stream,
// returning nil if the end of the stream is encountered. It then looks at the current character,
// and depending on its value, either stays in the same state and incremenets the character count
// for that token, or switches to a new state (optionally producing a token). A token is "produced"
// by returning a cons pair where the head is the token and the tail is a continuation which can
// later be invoked to obtain futher tokens.
//
// Lazy evaluation is used for the tokenization, so that the parser can begin constructing the
// element tree before the whole stream has arrived. If a program that uses the XML module only
// accesses the first part of a document, the rest of the document does not need to be parsed,
// tokenized, or read from the data source. If an attempt is made to obtain the next token from
// the stream, and the necessary data is not yet available, then the caller will block; this can
// happen for example when reading XML data over a slow network connection.
//==================================================================================================

tokenize stream = (tokenize_skipspace stream)

tokenize_main !stream !start !count =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '<')
      (if (> count 0)
        (cons (cons TOKEN_TEXT (prefix count start))
          (tokenize_namestart rest))
        (tokenize_namestart rest))
      (tokenize_main rest start (+ count 1))))
  nil)

tokenize_pi !stream =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '?')
      (tokenize_piend rest)
      (tokenize_pi rest)))
  (error "XML parse error: unexpected end of input in processing instruction"))

tokenize_piend !stream =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '>')
      (tokenize_skipspace rest)
      (tokenize_pi rest)))
  (error "XML parse error: unexpected end of input in processing instruction end"))

tokenize_skipspace !stream =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (isspace c)
      (tokenize_skipspace rest)
      (tokenize_main stream stream 0)))
  nil)

tokenize_namestart !stream =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '/')
      (tokenize_endname rest rest 0)
      (if (== c '?')
        (tokenize_pi rest)
        (if (== c '!')
          (tokenize_comment1 rest stream)
          (tokenize_name stream stream 0)))))
  (error "XML parse error: unexpected end of input at start of element name"))

tokenize_comment1 !stream !start =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '-')
      (tokenize_comment2 rest start)
      (tokenize_name start start 0)))
  (error "XML parse error: unexpected end of input at start of comment"))

tokenize_comment2 !stream !start =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '-')
      (tokenize_comment rest rest 0)
      (tokenize_name start start 0)))
  (error "XML parse error: unexpected end of input at start of comment"))

tokenize_comment !stream !start !count =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '-')
      (tokenize_comment_end1 rest start (+ count 1))
      (tokenize_comment rest start (+ count 1))))
  (error "XML parse error: unexpected end of input in comment"))

tokenize_comment_end1 !stream !start !count =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '-')
      (tokenize_comment_end2 rest start (+ count 1))
      (tokenize_comment rest start (+ count 1))))
  (error "XML parse error: unexpected end of input in comment"))

tokenize_comment_end2 !stream !start !count =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '>')
      (cons (cons TOKEN_COMMENT (prefix (- count 2) start))
        (tokenize_main rest rest 0))
      (tokenize_comment rest start (+ count 1))))
  (error "XML parse error: unexpected end of input in comment"))

tokenize_name !stream !start !count =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '>')
      (cons (cons TOKEN_STARTELEM (prefix count start))
        (tokenize_main rest rest 0))
      (if (== c '/')
        (cons (cons TOKEN_STARTELEM (prefix count start))
          (tokenize_leafend rest))
        (if (isspace c)
          (cons (cons TOKEN_STARTELEM (prefix count start))
            (tokenize_attrsearch rest))
          (tokenize_name rest start (+ count 1))))))
  (error (append "XML parse error: unexpected end of input in open tag: " start)))

tokenize_endname !stream !start !count =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '>')
      (cons (cons TOKEN_ENDELEM nil)
        (tokenize_main rest rest 0))
      (tokenize_endname rest start (+ count 1))))
  (error (append "XML parse error: unexpected end of input in close tag: " start)))

tokenize_leafend !stream =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '>')
      (cons (cons TOKEN_ENDELEM nil)
        (tokenize_main rest rest 0))
      (error (append "XML parse error: invalid character after / in open tag: " stream))))
  (error "XML parse error: unexpected end of input in standalone tag"))

tokenize_attrsearch !stream =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '>')
      (tokenize_main rest rest 0)
      (if (== c '/')
        (tokenize_leafend rest)
        (if (isspace c)
          (tokenize_attrsearch rest)
          (tokenize_attrname rest stream 0)))))
  (error "XML parse error: unexpected end of input in open tag"))

tokenize_attrname !stream !start !count =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (or (== c '=') (isspace c))
      (cons (cons TOKEN_ATTRNAME (prefix (+ count 1) start))
        (tokenize_eqsearch stream))
      (tokenize_attrname rest start (+ count 1))))
  (error "XML parse error: unexpected end of input in attribute name"))

tokenize_eqsearch !stream =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '=')
      (tokenize_valsearch rest)
      (if (isspace c)
        (tokenize_eqsearch rest)
        nil)))
  (error "XML parse error: unexpected end of input in attribute"))

tokenize_valsearch !stream =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '>')
      (tokenize_main rest rest 0)
      (if (== c '\"')
        (tokenize_value_dq rest rest 0)
        (if (== c '\'')
          (tokenize_value_sq rest rest 0)
          (if (isspace c)
            (tokenize_valsearch rest)
            nil)))))
  (error "XML parse error: unexpected end of input in attribute value"))

tokenize_value_dq !stream !start !count =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '\"')
      (cons (cons TOKEN_ATTRVALUE (prefix count start))
        (tokenize_attrsearch rest))
      (tokenize_value_dq rest start (+ count 1))))
  (error "XML parse error: unexpected end of input in attribute value"))

tokenize_value_sq !stream !start !count =
(if stream
  (letrec !c = (head stream) !rest = (tail stream) in
    (if (== c '\'')
      (cons (cons TOKEN_ATTRVALUE (prefix count start))
        (tokenize_attrsearch rest))
      (tokenize_value_sq rest start (+ count 1))))
  (error "XML parse error: unexpected end of input in attribute value"))

//==================================================================================================
// xml::print_tokens tokens
//
// Debugging function for printing out the result of the tokenization process
//==================================================================================================

print_tokens !tokens =
(if (not tokens)
  nil
  (letrec
    !tok = (head tokens)
    !rest = (tail tokens)
   in
    (appendn 5 (item (head tok) TOKEN_NAMES) ": \""
      (print_token (tail tok)) "\"\n"
      (print_tokens rest))))

print_token val =
(if val
  (if (== (head val) '\r')
    (append "\\r" (print_token (tail val)))
    (if (== (head val) '\n')
      (append "\\n" (print_token (tail val)))
      (cons (head val) (print_token (tail val)))))
  nil)

//==================================================================================================
// xml::add_whitespace nodes
//
// Produces a new copy of an XML element tree that contains whitespace added for indenting
// purposes. The whitespace is in the form of new text nodes containing a newline and some spaces.
// The indenting is done in accordance with the rules of section 5.1.3 of the XSLT 2.0 and
// XQuery 1.0 Serialization spec, which says that it can only be added in places where it does
// not alter the meaning of the document, i.e. the new whitespace must not be considered
// "significant".
//
// The main part of the work is done by add_whitespace1. This accepts a needindent parameter,
// specifying whether a new element that is encountered should have indentation added before it,
// of in the case of the end of the list, whether whitespace should be added. It also has a
// haveindent parameter, which records the number of characters encountered so far that are the
// same as what would be added; if a document already contains some indentation then only the
// necessary spaces will be added.
//==================================================================================================

add_whitespace nodes =
(add_whitespace1 0 nodes nil 0 nil)

add_whitespace1 depth lst needindent haveindent parent =
(if lst
  (letrec
    this = (head lst)
    rest = (tail lst)
    type = (item_type this)
   in
    (if (== type TYPE_ELEMENT)
      (letrec
        nsuri = (item_nsuri this)
        nsprefix = (item_nsprefix this)
        localname = (item_localname this)
        attributes = (item_attributes this)
        namespaces = (item_namespaces this)
        children = (item_children this)
        elem =
          (mkelem nil parent nil nil nsuri nsprefix localname attributes namespaces
              (if children
                (add_whitespace1 (+ depth 1) children 1 0 elem)
                nil))
       in
        (maybe_indent depth needindent haveindent
          (cons
            elem
            (add_whitespace1 depth rest 1 0 parent))))
      (if (== type TYPE_TEXT)
        (letrec
          str = (item_value this)
          newhave = (count_indent str haveindent)
          nws = (isnonws str)
         in
          (cons
            this
            (if nws
              (add_whitespace1 depth rest nil 0 parent)
              (add_whitespace1 depth rest needindent newhave parent))))
        (if (== type TYPE_COMMENT)
          (maybe_indent depth needindent haveindent
            (cons
              this
              (add_whitespace1 depth rest nil 0 parent)))
          (if (== type TYPE_DOCUMENT)
            (letrec
              children = (item_children this)
              doc = (mkdoc (add_whitespace1 depth children 1 0 doc))
             in
              (cons
                doc
                (add_whitespace1 depth rest nil 0 parent)))
            nil)))))
  (if (> depth 0)
    (maybe_indent (- depth 1) needindent haveindent nil)
    nil))

//==================================================================================================
// xml::count_indent
//
// Count the number of indentation characters present in a string. A set of indentation characters
// consists of a newline followed by one or more spaces. If a non-whitespace character is found,
// then this is the end of a possible indentation string and we must start from the beginning.
// The number of indentation characters already existing in previous text nodes is specified in the
// haveindent argument.
//==================================================================================================
count_indent str haveindent =
(if str
  (letrec
    c = (head str)
    rest = (tail str)
   in
    (if (== c '\n')
      (count_indent rest 1)
      (if (and (== c ' ') (> haveindent 0))
        (count_indent rest (+ haveindent 1))
        (count_indent rest 0))))
  haveindent)

//==================================================================================================
// xml::isnonws str
//
// Determines if a string contains any non-whitespace characters
//==================================================================================================
isnonws str =
//(seq (echo (append "isnonws \"" (append str "\"\n")))
(if str
  (if (isspace (head str))
    (isnonws (tail str))
    1)
  nil)

//==================================================================================================
// xml::maybe_indent depth needindent haveindent rest
//
// This function is used by add_whitespace
//
// Possibly add some whitespace to the document for indentation purposes. This is done only if
// needindent is true. If it is, then the depth and havindent is used to determine how much
// whitespace to add. A haveindent value of 0 means that there is no existing whitespace, and a
// newline and depth*3 spaces should be added. A haveindent value of 1 means that the newline
// is already there, so depth*3 spaces are needed. A haveindent value greater than 1 means that
// the newline is there, as well as (haveindent-1) spaces.
//==================================================================================================
maybe_indent depth needindent haveindent rest =
(if needindent
  (if (> haveindent 0)
    (cons (mktext (spaces (- (* depth 3) (- haveindent 1)))) rest)
    (cons (mktext (append "\n" (spaces (* depth 3)))) rest))
  rest)

//==================================================================================================
// xml::spaces n
//
// Returns a string consisting of n spaces
//==================================================================================================
spaces n =
(letrec
  bulkspaces = (append "                                                            " bulkspaces)
in
(prefix n bulkspaces))

//==================================================================================================

parse tokens =
(if tokens
  (letrec
    pr = (parse1 tokens nil doc doc nil)
    children = (tail pr)
    doc = (mkdoc children)
   in
    (cons doc nil))
  (error "parse: no tokens"))

parse1 tokens namespaces root parent prev =
(if (not tokens)
  (cons nil nil)
(letrec
  cur = (head tokens)
  rest = (tail tokens)
  tag = (head cur)
in
  (if (== tag TOKEN_STARTELEM)
    (letrec
      newnamespaces = (parse_namespaces rest)
      augnamespaces = (cons newnamespaces namespaces)
      qname = (tail cur)
      nsprefix = (getnsprefix qname)
      nsuri = (ns_lookup nsprefix augnamespaces)
      localname = (getlocalname qname)
      arest = (skip_attrs rest)
      attributes = (parse_attrs rest augnamespaces root elem nil)
      cpr = (parse1 arest augnamespaces root elem nil)
      children = (tail cpr)
      crest = (head cpr)
      elem =
        (mkelem root parent prev next nsuri nsprefix localname attributes newnamespaces children)
      pr = (parse1 crest namespaces root parent elem)
      newrest = (head pr)
      next = (tail pr)
      lst = (cons elem next)
    in
      (cons newrest lst))
  (if (== tag TOKEN_ENDELEM)
    (cons rest nil)
  (if (== tag TOKEN_TEXT)
    (letrec
      text = (mktext2 (tail cur) parent prev next)
      pr = (parse1 rest namespaces root parent text)
      newrest = (head pr)
      next = (tail pr)
      lst = (cons text next)
    in
      (cons newrest lst))
  (if (== tag TOKEN_COMMENT)
    (letrec
      text = (mkcomment2 (tail cur) parent prev next)
      pr = (parse1 rest namespaces root parent text)
      newrest = (head pr)
      next = (tail pr)
      lst = (cons text next)
    in
      (cons newrest lst))
  (error "Invalid tag")))))))

skip_attrs tokens =
(if (not tokens)
  nil
(letrec
  cur = (head tokens)
  rest = (tail tokens)
  tag = (head cur)
 in
  (if (== tag TOKEN_ATTRNAME)
    (skip_attrs (tail (tail tokens)))
    tokens)))

parse_attrs tokens namespaces root parent prev =
(if (not tokens)
  nil
(letrec
  cur = (head tokens)
  rest = (tail tokens)
  tag = (head cur)
 in
  (if (== tag TOKEN_ATTRNAME)
    (letrec
      value = (tail (head rest))
      rest2 = (tail rest)
      qname = (tail cur)
      nsprefix = (getnsprefix qname)
      nsuri = (if nsprefix (ns_lookup nsprefix namespaces) nil)
      localname = (getlocalname qname)
      attr = (mkattr root parent prev next nsuri nsprefix localname value)
      next = (parse_attrs rest2 namespaces root parent attr)
     in
      // Check if it's a namespace attribute; if so, skip this one
      (if (streq nsprefix "xmlns")
        (parse_attrs rest2 namespaces root parent prev)
        (if (and (not nsprefix) (streq localname "xmlns"))
          (parse_attrs rest2 namespaces root parent prev)
          // It's a normal attribute; add it to the list
          (cons attr next))))
    nil)))

parse_namespaces tokens =
(if (not tokens)
  nil
  (letrec
    cur = (head tokens)
    rest = (tail tokens)
    tag = (head cur)
   in
    (if (== tag TOKEN_ATTRNAME)
      (letrec
        value = (tail (head rest))
        rest2 = (tail rest)
        qname = (tail cur)
        nsprefix = (getnsprefix qname)
        localname = (getlocalname qname)
       in
        (if (streq nsprefix "xmlns")
          (cons
            (mknamespace value localname)
            (parse_namespaces rest2))
          (if (and (not nsprefix) (streq localname "xmlns"))
            (cons
              (mknamespace value nil)
              (parse_namespaces rest2))
            (parse_namespaces rest2))))
      nil)))

//==================================================================================================

// Navigation

getnsprefix1 str start !count =
(if str
  (if (== (head str) ':')
    (prefix count start)
    (getnsprefix1 (tail str) start (+ count 1)))
  nil)

getnsprefix qname = (getnsprefix1 qname qname 0)

getlocalname1 qname start =
(if qname
  (if (== (head qname) ':')
    (tail qname)
    (getlocalname1 (tail qname) start))
  start)

getlocalname qname = (getlocalname1 qname qname)

get_attribute1 nsuri localname attrs =
(if attrs
  (letrec
    attr = (head attrs)
   in
    (if
      (and
        (streq (item_nsuri attr) nsuri)
        (streq (item_localname attr) localname))
      (item_value attr)
      (get_attribute1 nsuri localname (tail attrs))))
  nil)

get_attribute nsuri localname elem =
(get_attribute1 nsuri localname (item_attributes elem))

ns_lookup1 nsprefix lst =
(if lst
  (letrec
    ns = (head lst)
    value = (item_nsuri ns)
    prefix = (item_nsprefix ns)
   in
    (if (streq prefix nsprefix)
      value
      (ns_lookup1 nsprefix (tail lst))))
  nil)

ns_lookup2 nsprefix nslists =
(if nslists
  (letrec
    nsuri = (ns_lookup1 nsprefix (head nslists))
   in
    (if nsuri
      nsuri
      (ns_lookup2 nsprefix (tail nslists))))
  nil)

ns_lookup nsprefix nslists =
(if (streq nsprefix "xmlns")
  XMLNS_NS
  (ns_lookup2 nsprefix nslists))

getattr2 lst nsuri localname =
(if lst
  (letrec
    cur = (head lst)
   in
    (if (streq (xml::item_nsuri cur) nsuri)
      (if (streq (xml::item_localname cur) localname)
        (xml::item_value cur)
        (getattr2 (tail lst) nsuri localname))
      (getattr2 (tail lst) nsuri localname)))
  nil)

getattr elem nsuri localname =
(getattr2 (xml::item_attributes elem) nsuri localname)

is_element nsuri localname node =
(if (== (xml::item_type node) xml::TYPE_ELEMENT)
  (if (streq (xml::item_nsuri node) nsuri)
    (streq (xml::item_localname node) localname)
    nil)
  nil)

// FIXME: need to escape element/attribute names and values when printing

print_attrs lst next =
(if lst
  (letrec
    attr = (head lst)
    nsuri = (item_nsuri attr)
    nsprefix = (item_nsprefix attr)
    localname = (item_localname attr)
    qname = (if nsprefix (append nsprefix (cons ':' localname)) localname)
    //qname = (if nsuri (cons '{' (append nsuri (cons '}' localname))) localname)
   in
    (append " "
//        (append (++ "{" (++ nsuri (++ "}" qname)))
      (append qname
        (append "=\""
          (append (item_value attr)
            (append "\"" (print_attrs (tail lst) next)))))))
  next)

have_namespace lst nsprefix nsuri next =
(if lst
  (letrec
    cur = (head lst)
  in
    (if (streq nsprefix (item_nsprefix cur))
      (streq nsuri (item_nsuri cur))
      (have_namespace (tail lst) nsprefix nsuri next)))
  nil)

node_has_namespace node nsprefix nsuri =
(if node
  (have_namespace (item_namespaces node) nsprefix nsuri
    (node_has_namespace (item_parent node) nsprefix nsuri))
  nil)

have_nsprefix nsprefix lst =
(if lst
  (if (streq nsprefix (item_nsprefix (head lst)))
    1
    (have_nsprefix nsprefix (tail lst)))
  nil)

node_default_namespace node =
(if node
  (if (have_nsprefix "" (item_namespaces node))
    (if (streq "" (ns_lookup1 "" (item_namespaces node)))
      1
      nil)
    (node_default_namespace (item_parent node)))
  1)

print_namespaces node lst next =
(if lst
  (letrec
    cur = (head lst)
    nsuri = (item_nsuri cur)
    nsprefix = (item_nsprefix cur)
    parent = (item_parent node)
   in
    (if (node_has_namespace parent nsprefix nsuri)
      (print_namespaces node (tail lst) next)
    (if (and (and (streq nsprefix "") (streq nsuri ""))
             (node_default_namespace parent))
      (print_namespaces node (tail lst) next)
      (append (if nsprefix " xmlns:" " xmlns")
        (append nsprefix
          (append "=\""
            (append nsuri
              (append "\"" (print_namespaces node (tail lst) next)))))))))
  next)

print_nodes lst next =
(if lst
  (letrec
    node = (head lst)
    rest = (tail lst)
   in
    (if (== (item_type node) TYPE_ELEMENT)
      (letrec
        nsuri = (item_nsuri node)
        nsprefix = (item_nsprefix node)
        localname = (item_localname node)
        attributes = (item_attributes node)
        namespaces = (item_namespaces node)
        children = (item_children node)
        qname = (if nsprefix (append nsprefix (cons ':' localname)) localname)
        //qname = (if nsuri (cons '{' (append nsuri (cons '}' localname))) localname)
       in
        (if children
          (cons '<'
//            (append (++ "{" (++ nsuri (++ "}" qname)))
            (append qname
              (print_namespaces node namespaces
                (print_attrs attributes
                  (cons '>'
                    (print_nodes children
                      (cons '<'
                        (cons '/'
                          (append qname
                            (append ">"
                              (print_nodes rest next)))))))))))
          (cons '<'
//            (append (++ "{" (++ nsuri (++ "}" qname)))
            (append qname
              (print_namespaces node namespaces
                (print_attrs attributes
                  (append "/>" (print_nodes rest next))))))))
      (if (== (item_type node) TYPE_TEXT)
        (append (item_value node) (print_nodes rest next))
        (if (== (item_type node) TYPE_COMMENT)
          (append "<!--" (append (item_value node) (append "-->" (print_nodes rest next))))
          (if (== (item_type node) TYPE_DOCUMENT)
            (print_nodes (item_children node) (print_nodes rest next))
            (append "OTHER: " (append (numtostring (item_type node)) (print_nodes rest next))))))))
  next)

////////////////////////////////////////////////////////////////////////////////

copy_attrs lst root parent prev =
(if lst
  (letrec
    attr = (head lst)
    next = (copy_attrs (tail lst) root parent copy)
    copy = (mkattr root parent prev next
             (item_nsuri attr)
             (item_nsprefix attr)
             (item_localname attr)
             (item_value attr))
  in
    (cons copy next))
  nil)

stripspaces lst root parent prev =
(if lst
  (letrec
    cur = (head lst)
    rest = (tail lst)
    type = (item_type cur)
   in
    (if (== type TYPE_ELEMENT)
      (letrec
        elem =
        (mkelem
          root
          parent
          prev
          next
          (item_nsuri cur)
          (item_nsprefix cur)
          (item_localname cur)
          (copy_attrs (item_attributes cur) root elem nil)
          (item_namespaces cur)
          (stripspaces (item_children cur) root elem nil))
        next =
        (stripspaces rest root parent elem)
       in
        (cons elem next))
      (if (== type TYPE_TEXT)
        (if (isnonws (item_value cur))
          (letrec
            content = (item_value cur)
            text = (mktext2 content parent prev next)
            next = (stripspaces rest root parent text)
           in
            (cons text next))
          (stripspaces rest root parent prev))
        (if (== type TYPE_COMMENT)
          (letrec
            content = (item_value cur)
            comment = (mkcomment2 content parent prev next)
            next = (stripspaces rest root parent comment)
           in
            (cons comment next))
          (if (== type TYPE_DOCUMENT)
            (letrec
              doc = (mkdoc (stripspaces (item_children cur) root doc nil))
             in
              (cons doc nil))
            (cons cur (stripspaces rest root parent cur)))))))
  nil)

parsexml strip stream =
(letrec
 input = (parse (tokenize stream))
 input2 = (if strip (stripspaces input res nil nil) input)
 res = (head input2)
 in
  res)

printxml indent root =
(letrec
  raw = (cons root nil)
  nodes = (if indent (add_whitespace raw) raw)
 in
  (if nodes
    (append XML_DECL (print_nodes nodes nil))
    XML_DECL))
