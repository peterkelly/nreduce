import xml
import http

output indent raw =
(letrec
  nodes = (if indent (xml::add_whitespace raw) raw)
 in
  (append xml::XML_DECL (xml::print_nodes nodes nil)))

//==================================================================================================
// Functions to abstract specific node types from sequences

get_children lst =
(if lst
  (if
    (or
      (== (xml::item_type (head lst)) xml::TYPE_ATTRIBUTE)
      (== (xml::item_type (head lst)) xml::TYPE_NAMESPACE))
    (get_children (tail lst))
    lst)
  nil)

get_attributes lst =
(if lst
  (if (== (xml::item_type (head lst)) xml::TYPE_ATTRIBUTE)
    (cons (head lst) (get_attributes (tail lst)))
    (if (== (xml::item_type (head lst)) xml::TYPE_NAMESPACE)
      (get_attributes (tail lst))
      nil))
  nil)

get_namespaces lst =
(if lst
  (if (== (xml::item_type (head lst)) xml::TYPE_NAMESPACE)
    (cons (head lst) (get_namespaces (tail lst)))
    (if (== (xml::item_type (head lst)) xml::TYPE_ATTRIBUTE)
      (get_namespaces (tail lst))
      nil))
  nil)

//==================================================================================================
// Comparison operators

// Value comparison

value_eq x y = (if (and x y) (cons (xml::mkbool (== (value_cmp x y) 0)) nil) nil)
value_ne x y = (if (and x y) (cons (xml::mkbool (!= (value_cmp x y) 0)) nil) nil)
value_lt x y = (if (and x y) (cons (xml::mkbool (< (value_cmp x y) 0)) nil) nil)
value_le x y = (if (and x y) (cons (xml::mkbool (<= (value_cmp x y) 0)) nil) nil)
value_gt x y = (if (and x y) (cons (xml::mkbool (> (value_cmp x y) 0)) nil) nil)
value_ge x y = (if (and x y) (cons (xml::mkbool (>= (value_cmp x y) 0)) nil) nil)

value_cmp x y =
(if (or (tail x) (tail y))
  (error "XPTY0004: value comparison with sequence of length > 1")
  (base_cmp (atomize1 (head x)) (atomize1 (head y))))

base_cmp x y =
(letrec
  tx1 = (xml::item_type x)
  ty1 = (xml::item_type y)
  tx = (if (== tx1 xml::UNTYPED_ATOMIC) xml::TYPE_STRING tx1)
  ty = (if (== ty1 xml::UNTYPED_ATOMIC) xml::TYPE_STRING ty1)
 in
  (if (and (== tx xml::TYPE_NUMBER) (== ty xml::TYPE_NUMBER))
    (- (xml::item_value x) (xml::item_value y))
    (if (and (== tx xml::TYPE_STRING) (== ty xml::TYPE_STRING))
      (strcmp (xml::item_value x) (xml::item_value y))
      (if (and (== tx xml::TYPE_BOOLEAN) (== ty xml::TYPE_BOOLEAN))
        (boolcmp (xml::item_value x) (xml::item_value y))
        (error "XPTY0004: invalid types in comparison")))))

boolcmp x y =
(if (and x (not y))
  1
  (if (and (not x) y)
    (- 0 1)
    0))

// General comparison

general_eq x y = (cons (xml::mkbool (general_cmp1 == x y y)) nil)
general_ne x y = (cons (xml::mkbool (general_cmp1 != x y y)) nil)
general_lt x y = (cons (xml::mkbool (general_cmp1 < x y y)) nil)
general_le x y = (cons (xml::mkbool (general_cmp1 <= x y y)) nil)
general_gt x y = (cons (xml::mkbool (general_cmp1 > x y y)) nil)
general_ge x y = (cons (xml::mkbool (general_cmp1 >= x y y)) nil)

general_cmp1 op x y ytop =
(if x
  (if y
    (letrec
      bc = (gen_base_cmp (atomize1 (head x)) (atomize1 (head y)))
     in
      (if (op bc 0)
        1
        (general_cmp1 op x (tail y) ytop)))
    (general_cmp1 op (tail x) ytop ytop))
  nil)

gen_base_cmp x y =
(letrec
  tx = (xml::item_type x)
  ty = (xml::item_type y)
 in
  (if (== tx xml::TYPE_NUMBER)
    (if (== ty xml::TYPE_NUMBER) // a
      (- (xml::item_value x) (xml::item_value y))
      (if (== ty xml::UNTYPED_ATOMIC) // a
        (- (xml::item_value x) (stringtonum (xml::item_value y)))
        (error "FORG0001: invalid types in comparison")))


    (if (== tx xml::TYPE_STRING)
      (if (== ty xml::TYPE_STRING) // b
        (strcmp (xml::item_value x) (xml::item_value y))
        (if (== ty xml::UNTYPED_ATOMIC) // b
          (strcmp (xml::item_value x) (xml::item_value y))
          (error "FORG0001: invalid types in comparison")))

      (if (== tx xml::UNTYPED_ATOMIC)
        (if (== ty xml::TYPE_NUMBER) // a
          (- (stringtonum (xml::item_value x)) (xml::item_value y))
          (if (== ty xml::TYPE_STRING) // b
            (strcmp (xml::item_value x) (xml::item_value y))
            (if (== ty xml::UNTYPED_ATOMIC) // b
              (strcmp (xml::item_value x) (xml::item_value y))
              (error "FORG0001: invalid types in comparison"))))

        (error "FORG0001: invalid types in comparison")))))

//==================================================================================================
// Arithmetic operators

add x y = (arithop + x y)

subtract x y = (arithop - x y)

multiply x y = (arithop * x y)

divide x y = (arithop / x y)

mod x y = (arithop % x y)

arithop op x y =
(if (and x y)
  (if (or (tail x) (tail y))
    (error "XPTY0004: sequence of length > 1 passed to arithmetic operator")
    (letrec
      atomx = (atomize1 (head x))
      atomy = (atomize1 (head y))
     in
      (cons (xml::mknumber (op (tonumber atomx) (tonumber atomy))) nil)))
  nil)

tonumber item =
(letrec
  type = (xml::item_type item)
 in
  (if (== type xml::TYPE_NUMBER)
    (xml::item_value item)
    (if (== type xml::UNTYPED_ATOMIC)
      (stringtonum (xml::item_value item))
      (error "FORG0001: non-numeric value passed to arithmetic operator"))))

uminus x = (if (not x)
              nil
          (if (tail x)
              (error "XPTY0004")
          (if (== (xml::item_type (head x)) xml::TYPE_NUMBER)
              (cons (xml::mknumber (- 0 (xml::item_value (head x)))) nil)
              (error "FORG0001"))))

uplus x = (if (not x)
              nil
          (if (tail x)
              (error "XPTY0004")
          (if (== (xml::item_type (head x)) xml::TYPE_NUMBER)
              (cons (xml::mknumber (xml::item_value (head x))) nil)
              (error "FORG0001"))))

//==================================================================================================
// Node tests

name_test type nsuri localname node =
(if (== (xml::item_type node) type)
  (if (streq (xml::item_nsuri node) nsuri)
    (streq (xml::item_localname node) localname)
    nil)
  nil)

wildcard_uri_test type localname node =
(if (== (xml::item_type node) type)
  (streq (xml::item_localname node) localname)
  nil)

wildcard_localname_test type nsuri node =
(if (== (xml::item_type node) type)
  (streq (xml::item_nsuri node) nsuri)
  nil)

type_test type node =
(== (xml::item_type node) type)

any_test node = 1

//==================================================================================================
// Data model accessors

dm_string_value node =
(letrec
  type = (xml::item_type node)
 in
  (if (== type xml::TYPE_TEXT)
    (xml::item_value node) // content
    (if (== type xml::TYPE_COMMENT)
      (xml::item_value node) // content
      (if (== type xml::TYPE_NAMESPACE)
        (xml::item_nsuri node) // uri
        (if (== type xml::TYPE_ATTRIBUTE)
          (xml::item_value node) // value
          // else: element or document
          (textcontent (xml::item_children node)))))))

//==================================================================================================
// Atomization

atomize lst =
(map atomize1 lst)

atomize1 x =
(if (isatomic x)
  x
  (if (== (xml::item_type x) xml::TYPE_TEXT)
    (xml::mkuntyped (xml::item_value x))
    (if (== (xml::item_type x) xml::TYPE_COMMENT)
      (xml::mkuntyped (xml::item_value x))
      (if (== (xml::item_type x) xml::TYPE_ATTRIBUTE)
        (xml::mkuntyped (xml::item_value x))
        (if (== (xml::item_type x) xml::TYPE_ELEMENT)
          (xml::mkuntyped (textcontent (xml::item_children x)))
          (if (== (xml::item_type x) xml::TYPE_DOCUMENT)
            (xml::mkuntyped (textcontent (xml::item_children x)))
	    (if (== (xml::item_type x) xml::TYPE_NAMESPACE)
		(xml::mkuntyped (xml::item_nsuri x))
	      (error (append "FIXME(atomize):" (numtostring (xml::item_type x)))))))))))

textcontent lst =
(if lst
    (letrec
       cur = (head lst)
       rest = (tail lst)
       type = (xml::item_type cur)
     in
       (if (== type xml::TYPE_TEXT)
           (append (xml::item_value cur) (textcontent rest))
       (if (== type xml::TYPE_ELEMENT)
           (append (textcontent (xml::item_children cur)) (textcontent rest))
       (if (== type xml::TYPE_DOCUMENT)
           (append (textcontent (xml::item_children cur)) (textcontent rest))
           (textcontent rest)))))
    nil)

//==================================================================================================
// Serialization section 2: Sequence Normalization

normalize1 lst =
(if lst
    lst
    (cons (xml::mkstring "") nil))

isatomic x =
(<= (xml::item_type x) xml::MAX_ATOMIC_TYPE)

atom_to_string x =
(letrec
  type = (xml::item_type x)
 in
  (if (== type xml::TYPE_NUMBER)
    (xml::mkstring (numtostring (xml::item_value x)))
    (if (== type xml::TYPE_BOOLEAN)
      (if (xml::item_value x)
        (xml::mkstring "true")
        (xml::mkstring "false"))
      (if (== type xml::TYPE_QNAME)
        (letrec
          nsprefix = (xml::item_nsprefix x)
          localname = (xml::item_localname x)
         in
          (if nsprefix
            (xml::mkstring (append nsprefix (cons ':' localname)))
            (xml::mkstring localname)))
        (if (== type xml::UNTYPED_ATOMIC)
          (xml::mkstring (xml::item_value x))
          (if (== type xml::TYPE_STRING)
            x
            (error (append "atom_to_string: invalid type "
                      (append (numtostring type) "\n")))))))))

normalize2 lst =
(map (!x.if (isatomic x)
            (atom_to_string x)
            x)
     lst)

getstrings lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_STRING)
        (append " " (append (xml::item_value (head lst)) (getstrings (tail lst))))
        nil)
    lst)

skipstrings lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_STRING)
        (skipstrings (tail lst))
        lst)
    lst)

normalize3 lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_STRING)
        (cons (xml::mkstring (append (xml::item_value (head lst)) (getstrings (tail lst))))
              (normalize3 (skipstrings lst)))
        (cons (head lst) (normalize3 (tail lst))))
    nil)

normalize4 lst =
(map (!x.if (== (xml::item_type x) xml::TYPE_STRING)
            (xml::mktext (xml::item_value x))
            x)
     lst)

// FIXME: here we should replace document nodes with their children
normalize5 lst = lst

gettexts lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_TEXT)
        (append " " (append (xml::item_value (head lst)) (gettexts (tail lst))))
        nil)
    lst)

skiptexts lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_TEXT)
        (skiptexts (tail lst))
        lst)
    nil)

normalize6 lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_TEXT)
        (if (xml::item_value (head lst))
            (cons (xml::mktext (append (xml::item_value (head lst)) (gettexts (tail lst))))
                  (normalize6 (skiptexts lst)))
            (normalize6 (tail lst)))
        (cons (head lst) (normalize6 (tail lst))))
    nil)

// FIXME: check for attribute/namespace nodes and report an error if found
normalize7 lst =
(cons (xml::mkdoc lst) nil)

normalize lst = (normalize7 (normalize6 (normalize5 (normalize4 (normalize3 (normalize2 (normalize1 lst)))))))













////////////////////////////////////////////////////////////////////////////////

getnumber x =
(if (not x)
    nil
(if (tail x)
    nil
(if (!= (xml::item_type (head x)) xml::TYPE_NUMBER)
    nil
    (xml::item_value (head x)))))

range min max = (if (<= min max) (cons (xml::mknumber min) (range (+ min 1) max)) nil)

foreach3 lst f = (apmap3 f lst)

apmap3 f lst = (apmap3a f lst 1 0)

apmap3a f lst !pos !total =
(if lst
    (append (f (head lst) pos (+ total (len lst)))
            (apmap3a f (tail lst) (+ pos 1) (+ total 1)))
    nil)

filter3 f lst = (filter3a f lst 1 0)

filter3a f lst !pos !total =
(if lst
    (if (f (head lst) pos (+ total (len lst)))
        (cons (head lst) (filter3a f (tail lst) (+ pos 1) (+ total 1)))
        (filter3a f (tail lst) (+ pos 1) (+ total 1)))
    nil)

isnode x =
(or (== (xml::item_type x) xml::TYPE_ELEMENT)
(or (== (xml::item_type x) xml::TYPE_TEXT)
(or (== (xml::item_type x) xml::TYPE_ATTRIBUTE)
(or (== (xml::item_type x) xml::TYPE_COMMENT)
    (== (xml::item_type x) xml::TYPE_DOCUMENT)))))

issingle seq = (if seq (not (tail seq)) nil)

isboolean x = (== (xml::item_type x) xml::TYPE_BOOLEAN)
isstring x = (== (xml::item_type x) xml::TYPE_STRING)
isnumber x = (== (xml::item_type x) xml::TYPE_NUMBER)

// XPath 2.0 2.4.3 - Effective Boolean Value
ebv seq =
(if (not seq)
    nil
(if (isnode (head seq))
    1
(if (not (tail seq))
    (if (isboolean (head seq))
        (xml::item_value (head seq))
    (if (isstring (head seq))
        (xml::item_value (head seq))
    (if (isnumber (head seq))
        (!= (xml::item_value (head seq)) 0)
        nil)))
    nil)))

predicate_match cpos seq =
(if seq
  (if (not (tail seq))
    (letrec
      x = (head seq)
     in
      (if (== (xml::item_type x) xml::TYPE_NUMBER)
        (== cpos (xml::item_value x))
        (ebv seq)))
    (ebv seq))
  (ebv seq))

tostring item =
(letrec
  type = (xml::item_type item)
 in
  (if (== type xml::TYPE_STRING)
    (xml::item_value item)
    (if (== type xml::UNTYPED_ATOMIC)
      (xml::item_value item)
      (error "Can't convert value to string"))))






//==================================================================================================
// XSLT 2.0 Section 5.7.2 - Constructing simple content

// Discard zero-length txt nodes
consimple1 lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_TEXT)
        (if (xml::item_value (head lst)) // string value is non-nil (i.e. non-zero length)
            (cons (head lst) (consimple1 (tail lst))) // keep it
            (consimple1 (tail lst))) // discard it
        (cons (head lst) (consimple1 (tail lst)))) // not a text node
    nil)

// Merge adjacent text nodes (same as sequence normalization step 6)
consimple2 lst = (normalize6 lst)

// Atomize the list
consimple3 lst = (atomize lst)

// Convert all values to strings
consimple4 lst = (map atom_to_string lst)

// Concatenate strings (uses a space as the default separator; this should actually be
// configurable)
consimple5 lst = (normalize3 lst)

mergestrings lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_STRING)
        (append (xml::item_value (head lst)) (mergestrings (tail lst)))
    (if (== (xml::item_type (head lst)) xml::TYPE_TEXT)
        (append (xml::item_value (head lst)) (mergestrings (tail lst)))
        (error "mergestrings: sequence contains non-string type")))
    nil)

consimple lst = (mergestrings (consimple5 (consimple4 (consimple3 (consimple2 (consimple1 lst))))))

//==================================================================================================
// XSLT 2.0 Section 5.7.2 - Constructing complex content

// 2. Any atomic value in the sequence is cast to a string.
concomplex2 lst = (map (!x.if (isatomic x) (atom_to_string x) x) lst)

// 3. Any consecutive sequence of strings within the result sequence is converted to a single text
// node, whose string value contains the content of each of the strings in turn, with a single
// space (#x20) used as a separator between successive strings.
concomplex3 lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_STRING)
        (cons (xml::mktext (append (xml::item_value (head lst)) (getstrings (tail lst))))
              (concomplex3 (skipstrings lst)))
        (cons (head lst) (concomplex3 (tail lst))))
    nil)

concomplex4 lst =
(if lst
    (if (== (xml::item_type (head lst)) xml::TYPE_DOCUMENT)
        (append (xml::item_children (head lst)) (concomplex4 (tail lst)))
        (cons (head lst) (concomplex4 (tail lst))))
    nil)

// FIXME: remaining steps

concomplex lst = (concomplex4 (concomplex3 (concomplex2 lst)))

//==================================================================================================
// XPath Functions and Operators

fn_true = (cons (xml::mkbool 1) nil)

fn_false = (cons (xml::mkbool nil) nil)

fn_data lst = (atomize lst)

//fn_doc url = (xml::parsexml 1 (http::get (tostring url)))

fn_doc url =
(if (not url)
  (error "doc() requires a sequence of exactly one item")
  (if (tail url)
    (error "doc() requires a sequence of exactly one item")
    (letrec
      data = (http::get (tostring (head url)))
     in
      (cons (xml::parsexml 1 data) nil))))

node_to_string node =
(if (isatomic node)
  (xml::item_value (atom_to_string node))
  (dm_string_value node))

fn_root0 node =
(cons (xml::item_root node) nil)

fn_root arg0 =
(if arg0
  (if (tail arg0)
    (error "root: argument is a list of length > 1")
    (fn_root0 (head arg0)))
  (error "root: argument is an empty list"))

fn_string0 node =
(cons (xml::mkstring (node_to_string node)) nil)

fn_string arg0 =
(if arg0
  (if (tail arg0)
    (error "string: argument is a list of length > 1")
    (fn_string0 (head arg0)))
  (error "string: argument is an empty list"))


fn_string_length0 node =
(cons (xml::mknumber (len (node_to_string node))) nil)

fn_string_length arg0 =
(if arg0
  (if (tail arg0)
    (error "string-length: argument is a list of length > 1")
    (fn_string_length0 (head arg0)))
  (cons (xml::mknumber 0) nil))

fn_node_name0 node =
(letrec
  type = (xml::item_type node)
in
  (if (or (== type xml::TYPE_ELEMENT) (== type xml::TYPE_ATTRIBUTE))
    (cons
      (xml::mkqname
        (xml::item_nsuri node)
        (xml::item_nsprefix node)
        (xml::item_localname node))
      nil)
  (if (== type xml::TYPE_NAMESPACE)
    (cons
      (xml::mkqname nil nil (xml::item_nsprefix node))
      nil)
    nil)))

fn_node_name arg0 =
(if arg0
  (if (tail arg0)
    (error "node-name: argument is a list of length > 1")
    (fn_node_name0 (head arg0)))
  (error "node-name: argument is an empty list"))

fn_sum1 lst =
(if lst
  (+ (tonumber (head lst)) (fn_sum1 (tail lst)))
  0)

fn_sum lst =
(cons (xml::mknumber (fn_sum1 (atomize lst))) nil)


fn_count1 lst !total =
(if lst
  (fn_count1 (tail lst) (+ total 1))
  total)

fn_count lst =
(cons (xml::mknumber (fn_count1 lst 0)) nil)

fn_avg lst =
(if lst
  (cons (xml::mknumber (/ (fn_sum1 (atomize lst)) (fn_count1 lst 0))) nil)
  nil)

fn_reverse lst =
(reverse lst)
















// FIXME: also allow parent/next/prev on text nodes and comments

node_parent_list node =
(letrec
  type = (xml::item_type node)
  parent =
  (if (== type xml::TYPE_ELEMENT)
    (xml::item_parent node)
    (if (== type xml::TYPE_TEXT)
      (xml::item_parent node)
      nil))
 in
  (if parent
    (cons parent nil)
    nil))

node_ancestors node =
(if (== (xml::item_type node) xml::TYPE_ELEMENT)
  (letrec
    parent = (xml::item_parent node)
   in
    (if parent
      (cons parent (node_ancestors parent))
      nil))
  nil)

node_ancestors_or_self node =
(cons node (node_ancestors node))

node_descendants node =
(letrec

  node_desc_list lst next =
    (if lst
      (letrec
        node = (head lst)
       in
        (cons node
          (loop
            node
            (node_desc_list (tail lst) next))))
      next)

  loop node next =
    (letrec
      type = (xml::item_type node)
     in
      (if (== type xml::TYPE_ELEMENT)
        (node_desc_list (xml::item_children node) next)
        (if (== type xml::TYPE_DOCUMENT)
          (node_desc_list (xml::item_children node) next)
          next)))

 in
  (loop node nil))

node_preceding_siblings node =
(letrec
  type = (xml::item_type node)
  prev = (xml::item_prev node)
 in
  (if prev
    (cons prev (node_preceding_siblings prev))
    nil))

node_following_siblings node =
(xml::item_next node)

node_preceding node =
(letrec

  last lst =
    (if lst
      (if (tail lst)
        (last (tail lst))
        (head lst))
      nil)

  last_descendant node level done =
    (letrec
      children = (xml::item_children node)
      lastchild = (last children)
     in
      (if lastchild
        (last_descendant lastchild (+ level 1) done)
        (cons node (loop node level done))))

  loop node level done =
    (letrec
      prev = (xml::item_prev node)
      parent = (xml::item_parent node)
     in
      (if prev
        (last_descendant prev level done)
        (if parent
          (letrec
            newlevel = (- level 1)
            newdone = (if (< newlevel done) newlevel done)
            next = (loop parent newlevel newdone)
           in
            (if (< newlevel done)
              next
              (cons parent next)))
          nil)))

 in
  (loop node 0 0))

node_following node =
(letrec

  gonext node =
    (letrec
      nextlist = (xml::item_next node)
      parent = (xml::item_parent node)
     in
      (if nextlist
        (traverse (head nextlist))
        (if parent
          (gonext parent)
          nil)))

  traverse node =
    (cons node
      (letrec
        children = (xml::item_children node)
       in
        (if children
          (traverse (head children))
          (gonext node))))

 in
  (gonext node))

fn_post content =
  (letrec
   text = (post "http:://localhost:8080/axis/Test.jws" (xslt::output 1 content))
  in
  (cons (xml::parsexml 1 text) nil))










post url content = (http::parse_url url (post2 url content))

post2 url content scheme host port path =
(letrec
  request = (append "POST " (append path (append " HTTP/1.1\r\nHost: " (append host (append "\r\nContent-Type: text/xml; charset=utf-8\r\nSOAPAction: \"\"\r\nContent-Length: " (append (numtostring (len content)) (append "\r\nConnection: close\r\n\r\n" content)))))))
  stream = (connect host (stringtonum port) request)
 in
  (http::parse_response stream (post3 url content)))

post3 url content version status reason headers body =
(if (== status 302)
  (post (http::get_header "location" headers) content)
  (if (!= status 200)
    (error
     (append "HTTP error "
	     (append (numtostring status) (append ": " (append url (append "\n" body))))))
    body))





copytree cfun lst root parent prev =
(if lst
  (letrec
    cur = (head lst)
    rest = (tail lst)
    type = (xml::item_type cur)
   in
    (if (== type xml::TYPE_ELEMENT)
      (letrec
        elem =
        (xml::mkelem
          root
          parent
          prev
          next
          (xml::item_nsuri cur)
          (xml::item_nsprefix cur)
          (xml::item_localname cur)
          (xml::item_attributes cur)
          (xml::item_namespaces cur)
          (copytree cfun (cfun (xml::item_children cur)) root elem nil))
        next =
        (copytree cfun rest root parent elem)
       in
        (cons elem next))
      (if (== type xml::TYPE_TEXT)
        (letrec
          content = (xml::item_value cur)
          text = (xml::mktext2 content parent prev next)
          next = (copytree cfun rest root parent text)
         in
          (cons text next))
        (if (== type xml::TYPE_COMMENT)
          (letrec
            content = (xml::item_value cur)
            comment = (xml::mkcomment2 content parent prev next)
            next = (copytree cfun rest root parent comment)
           in
            (cons comment next))
          (if (== type xml::TYPE_DOCUMENT)
            (letrec
              doc = (xml::mkdoc (copytree cfun (cfun (xml::item_children cur)) root doc nil))
             in
              (cons doc nil))
            (cons cur (copytree cfun rest root parent cur)))))))
  nil)

copydoc cfun doc =
(letrec
  res = (xml::mkdoc (xslt::copytree cfun (xml::item_children doc) res nil nil))
 in
  res)

reparent lst root parent prev =
(copytree (!x.x) lst root parent prev)

/* FIXME: need to remove duplicate nodes in the result sequence */
path_result lst =
(if lst
  (if (isatomic (head lst))
    (check_atomic lst)
    (check_node lst))
  nil)

path_result_sort lst =
(if lst
  (if (isatomic (head lst))
    (check_atomic lst)
    (docorder_sort (check_node lst)))
  nil)

check_atomic lst =
(if lst
  (if (isatomic (head lst))
    (cons (head lst) (check_atomic (tail lst)))
    (error "XPTY0018: sequence contains both atomic values and nodes"))
  nil)

check_node lst =
(if lst
  (if (isatomic (head lst))
    (error "XPTY0018: sequence contains both atomic values and nodes")
    (cons (head lst) (check_node (tail lst))))
  nil)

docorder_sort lst =
(if lst
  (letrec
    pivot = (head lst)
   in
    (docorder_sort2 pivot (tail lst) nil nil))
  nil)

/* FIXME: need to check that both nodes are in the same tree */
docorder_sort2 pivot lst before after =
(if lst
  (letrec
    item = (head lst)
    rest = (tail lst)
   in
    (if (< (xml::item_index item) (xml::item_index pivot))
      (docorder_sort2 pivot rest (cons item before) after)
      (docorder_sort2 pivot rest before (cons item after))))
  (append (docorder_sort before) (cons pivot (docorder_sort after))))

have_nsuri namespaces nsuri =
(if namespaces
  (letrec
    ns = (head namespaces)
    uri = (xml::item_nsuri ns)
  in
    (if (streq uri nsuri)
      1
      (have_nsuri (tail namespaces) nsuri)))
  nil)

/* FIXME: this should also check attributes */
nsfixup nsuri nsprefix localpart attrs namespaces =
(if (have_nsuri namespaces nsuri)
  (cons nsprefix namespaces)
(if (xml::have_nsprefix nsprefix namespaces)
  (letrec
    newprefix = (++ nsprefix "_0")
  in
    (cons newprefix (++ namespaces (cons (xml::mknamespace nsuri newprefix) nil))))
  (cons nsprefix (cons (xml::mknamespace nsuri nsprefix) namespaces))))

construct_elem1 nsuri qname xa xn content =
(letrec
  nsprefix1 = (xml::getnsprefix qname)
  localpart = (xml::getlocalname qname)
  attrs = (append xa (xslt::get_attributes content))
  namespaces = (append xn (xslt::get_namespaces content))
  np = (nsfixup nsuri nsprefix1 localpart attrs namespaces)
  nsprefix = (head np)
  rnamespaces = (tail np)
  children = (xslt::concomplex (xslt::get_children content))
  elem = (xml::mkelem nil nil nil nil nsuri nsprefix localpart attrs rnamespaces children)
 in
  (cons elem nil))

construct_elem2 nsuri nsprefix localpart xa xn content =
(letrec
  attrs = (append xa (xslt::get_attributes content))
  namespaces = (append xn (xslt::get_namespaces content))
  children = (xslt::concomplex (xslt::get_children content))
  elem = (xml::mkelem nil nil nil nil nsuri nsprefix localpart attrs namespaces children)
 in
  (cons elem nil))

construct_text str =
(cons (xml::mktext str) nil)

construct_value_of expr =
(cons (xml::mktext (xslt::consimple expr)) nil)

SOAPENV_NAMESPACE = "http://schemas.xmlsoap.org/soap/envelope/"

call_ws service_url inuri inlocalpart outuri outlocalpart args =
(letrec
  requestxml =
    (cons (xml::mkelem nil nil nil nil SOAPENV_NAMESPACE "soapenv" "Envelope" nil
      (cons (xml::mknamespace SOAPENV_NAMESPACE "soapenv") nil)
      (cons (xml::mkelem nil nil nil nil SOAPENV_NAMESPACE "soapenv" "Body" nil nil
        (cons (xml::mkelem nil nil nil nil inuri "operation" inlocalpart nil 
           (cons (xml::mknamespace inuri "operation") nil)
           args) nil)) nil)) nil)
  request = (xslt::output nil requestxml)
  response = (xslt::post service_url request)
  responsedoc = (xml::parsexml 1 response)
  topelems = (xml::item_children responsedoc)

  bodies = (xslt::apmap3
             (!citem.!cpos.!csize.
               (filter
                 (xslt::name_test xml::TYPE_ELEMENT SOAPENV_NAMESPACE "Body")
                 (xml::item_children citem)))
             topelems)

  respelems = (xslt::apmap3
                (!citem.!cpos.!csize.
                  (filter
                    (xslt::name_test xml::TYPE_ELEMENT outuri outlocalpart) 
                    (xml::item_children citem)))
                bodies)
  returns = (apmap xml::item_children respelems)
in
  returns)

ws_arg_list nsuri localpart expr =
(map
  (!x.(xml::mkelem nil nil nil nil nsuri nil localpart nil nil (xml::item_children x)))
  (filter
    (!x.== (xml::item_type x) xml::TYPE_ELEMENT)
    (xslt::concomplex (xslt::get_children expr))))

ws_arg nsuri localpart expr =
(xml::mkelem nil nil nil nil nsuri nil localpart nil nil 
  (xslt::concomplex (xslt::get_children expr)))

check_aos node test =
(if node
  (if (test node)
    node
    (check_aos (xml::item_parent node) test))
  nil)

compute_pos node =
(letrec
  prev = (xml::item_prev node)
in
  (if prev
    (+ 1 (compute_pos prev))
    1))

compute_size node =
(letrec
  parent = (xml::item_parent node)
in
  (if parent
    (len (xml::item_children parent))
    1))
