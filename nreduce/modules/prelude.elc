printer1 dest partlen lst =
(printer dest (arrayskip partlen lst))

printer dest lst =
(if lst
  (letrec
    partlen = (nchars lst)
   in
    (if partlen
      (seq (printarray dest partlen lst) (printer1 dest partlen lst))
      (seq (print dest (head lst)) (printer dest (tail lst)))))
  (printend dest))

sparklist lst =
(if lst
  (parhead lst (sparklist (tail lst)))
  nil)

parlist lst =
(if lst
  (seq (par (head lst) nil)
    (parlist (tail lst)))
  nil)

spark val =
(seq (sparklist val) val)

__start args =
(printer (getoutput nil) (main args))

streamfd fd =
(readchunk fd (streamfd fd))

readb filename =
(streamfd (openfd (forcelist filename)))

exists path =
(fexists (forcelist path))

isdir path =
(fisdir (forcelist path))

streamcon so =
(readcon so (streamcon so))

connect host port out =
(letrec
  con = (opencon (forcelist host) port (printer con out))
 in
  (streamcon con))

acceptloop handler so =
(letrec
  connso = (accept so (printer connso (handler instream)))
 instream = (streamcon connso)
 in
  (seq connso
    (cons instream (acceptloop handler so))))

listen host port handler =
(acceptloop handler (startlisten (forcelist host) port))

readdir filename =
(readdir1 (forcelist filename))

stdin =
(streamfd 0)

readt filename =
(readb filename)

len1 !total lst =
(if lst
  (letrec partlen = (arraysize lst) in
    (len1 (+ total partlen) (arrayskip partlen lst)))
  total)

len lst =
(len1 0 lst)

skip n lst =
(if (<= n 0)
  lst
  (letrec partlen = (arraysize lst) in
    (if (< n partlen)
      (arrayskip n lst)
      (skip (- n partlen) (arrayskip partlen lst)))))

item n lst = (head (skip n lst))

prefix n lst =
(if (<= n 0)
  nil
  (letrec partlen = (arraysize lst) in
    (if (<= n partlen)
      (arrayprefix n lst nil)
      (arrayprefix partlen lst
        (prefix (- n partlen) (arrayskip partlen lst))))))

sub !start !count lst =
(prefix count (skip start lst))

append a b =
(if a
  (letrec partlen = (arraysize a) in
    (arrayprefix partlen a (append (arrayskip partlen a) b)))
  b)

appendn n a b =
(if (= n 2)
  (append a b)
  (appendn (- n 1) (append a b)))

append1 a b =
(append a (cons b nil))

forcelist1 lst =
(if lst
  (letrec
    partlen = (nchars lst)
   in
    (if partlen
      (forcelist1 (arrayskip partlen lst))
      (seq (head lst) (forcelist1 (tail lst)))))
  nil)

forcelist lst =
(seq (forcelist1 lst) lst)

listn n a =
(if (= n 1)
  (cons a nil)
  (consn n (cons a nil)))

consn n a b =
(if (= n 2)
  (append1 a b)
  (consn (- n 1) (append1 a b)))

strcmp a b =
(letrec
  res = (arraystrcmp a b)
 in
  (if res
    res
    (strcmpcons a b)))

strcmpcons a b =
(if a
  (if b
    (if (= (head a) (head b))
      (strcmp (tail a) (tail b))
      (- (head a) (head b)))
    1)
  (if b
    -1
    0))


streq a b = (= (strcmp a b) 0)

map f lst =
(if lst
  (cons (f (head lst))
    (map f (tail lst)))
  nil)

filter f lst =
(if lst
  (if (f (head lst))
    (cons (head lst) (filter f (tail lst)))
    (filter f (tail lst)))
  nil)

reverse1 lst rev =
(if lst
  (reverse1 (tail lst) (cons (head lst) rev))
  rev)

reverse lst =
(reverse1 lst nil)

echo str =
(echo1 (forcelist str))

stringtonum str =
(stringtonum1 (forcelist str))

error str =
(error1 (forcelist str))
