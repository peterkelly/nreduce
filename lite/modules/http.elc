import util

//==================================================================================================
// http::get url
//
// Retrives the contents of the specified URL. The return value is a data stream containing the
// data received from the connection. This is lazily evaluated and the data will only be read from
// the connection when the program traverses the list.
//
// The function follows HTTP redirects (status 302) if received, and will retrieve the destination
// page, following that as well if it is a redirect, and so on. Apart from these, if any status code
// other than OK (200) is received, an error will be signaled.
//==================================================================================================

get url = (http::parse_url url (get2 url))

get2 url scheme host port path =
(letrec
  request = (appendn 5 "GET " path " HTTP/1.1\r\nHost: " host "\r\nConnection: close\r\n\r\n")
  stream = (connect host (stringtonum port) request)
 in
  (http::parse_response stream (get3 url)))

get3 url version status reason headers body =
(if (== status 302)
  (get (http::get_header "location" headers))
  (if (!= status 200)
    (error (append "HTTP error " (append (numtostring status) (append ": " url))))
    body))

//==================================================================================================
// http::parse_url str fun
//
// Parses str as a URL and extracts four components: scheme, host, port, and path. fun must be
// a function of four arguments; this will be invoked when parsing has completed, with the URL
// components passed in as the arguments. The path component includes the query string and fragment
// identifier.
//
// No error handling is done for invalid URLs. If a part of the URL is missing then that argument
// to the function will be nil. If invalid characters are present they will just be passed as normal
// to the function.
//==================================================================================================

parse_url str = (pu_scheme str str 0)

pu_scheme str start !count =
(if (== (head str) ':')
  (pu_host (prefix count start) (skip 3 str))
  (pu_scheme (tail str) start (+ count 1)))

pu_host scheme str = (pu_host1 scheme str str 0)

pu_host1 scheme str start !count =
(if str
  (if (== (head str) ':')
    (pu_port scheme (prefix count start) (tail str))
    (if (== (head str) '/')
      (pu_path scheme (prefix count start) "80" str)
      (pu_host1 scheme (tail str) start (+ count 1))))
  (pu_path scheme (prefix count start) "80" "/"))

pu_port scheme host str = (pu_port1 scheme host str str 0)

pu_port1 scheme host str start !count =
(if str
  (if (== (head str) '/')
    (pu_path scheme host (prefix count start) str)
    (pu_port1 scheme host (tail str) start (+ count 1)))
  (pu_path scheme host (prefix count start) "/"))

pu_path scheme host port path fun = (fun scheme host port path)

//==================================================================================================
// http::parse_request stream fun
//
// Parses a HTTP request received from a client. The stream is the raw data received over the
// connection. fun must be a function of 5 arguments: method uri version headers body; when the
// request parsing is complete it will be passed the relevant components of the response.
//
// This function uses http::parse_message to do most of the work, and them extracts the method, URI,
// and HTTP version.
//==================================================================================================

parse_request stream =
(parse_message stream got_request)

got_request startline headers body fun =
(letrec
  parts = (util::tokens startline)
 in
  (fun (item 0 parts) (item 1 parts) (item 2 parts) headers body))

//==================================================================================================
// http::parse_response stream fun
//
// Parses a HTTP response received from a server. The stream is the raw data received over the
// connection. fun must be a function of 5 arguments: version status reason headers body; when the
// response parsing is complete it will be passed the relevant components of the response.
//
// This function uses http::parse_message to do most of the work, and them extracts the HTTP version,
// status code, and reason from the status line. Bug: only the first word of the reason field is
// passed. You should use the status code instead.
//==================================================================================================

parse_response stream =
(parse_message stream got_response)

got_response startline headers body fun =
(letrec
  parts = (util::tokens startline)
 in
  (fun (item 0 parts) (stringtonum (item 1 parts)) (item 2 parts) headers body))

//==================================================================================================
// http::parse_message stream fun
//
// Parses a data stream containing a HTTP message, which may be either a request sent by a client,
// or a response sent back by a server. Both have the same general format: a start line, followed
// by the headers, a blank line, and then the (possibly encoded) body.
//
// fun must be a function of three arguments: startline, headers, and body. When the HTTP message
// is parsed, fun will be invoked, and the three different components of the message will be passed
// as arguments. The start line is a string, which must be parsed by the caller to extract the
// appropriate components for a request or response. headers is a list of (name,value) pairs; the
// http::get_header function can be used to access a specific header. The *decoded* body is passed
// to the function, so e.g. if the "chunked" transfer encoding was specified in the headers then
// this function will handle the decodeing.
//
// No error checking is performed. If the request is invalid, only the components that have been
// succesfully parsed will be non-nil.
//==================================================================================================

parse_message stream = (parse_message1 nil nil stream stream 0)

parse_message1 startline headers stream start !count =
(if stream
  (if (== (head stream) '\n')
    (parse_message2 startline headers (tail stream) start count)
    (if (if (== (head stream) '\r')
        (if (tail stream)
          (== (head (tail stream)) '\n')
          nil)
        nil)
      (parse_message2 startline headers (tail (tail stream)) start count)
      (parse_message1 startline headers (tail stream) start (+ count 1))))
  (got_message startline headers nil))

parse_message2 startline headers s start !count =
(if (== count 0)
  (got_message startline headers s)
  (if startline
    (parse_message1 startline (cons (prefix count start) headers) s s 0)
    (parse_message1 (prefix count start) headers s s 0)))

got_message startline hdrlines body fun =
(letrec
  headers = (parse_headers (reverse hdrlines))
  chunked = (streq (util::lcase (http::get_header "transfer-encoding" headers)) "chunked")
 in
  (fun startline headers (if chunked (dechunk body) body)))

//==================================================================================================
// http::parse_headers lines
//
// Parse the headers contained within a HTTP message. lines is a list of lines that contain the
// headers. The function returns a list of (name,value) pairs, with the names converted to lower
// case.
//
// This function also handles headers that are spread over multiple lines, as per the HTTP
// specification.
//==================================================================================================

parse_headers lines =
(if lines
  (phname (head lines) (head lines) 0 (tail lines))
  nil)

phname line start !count rest =
(if line
  (if (== (head line) ':')
    (phvaluestart (util::lcase (prefix count start)) (tail line) rest)
    (phname (tail line) start (+ count 1) rest))
  nil)

phvaluestart name line rest =
(if line
  (if (== (head line) ' ')
    (phvaluestart name (tail line) rest)
    (phvalue name nil line line 0 rest))
  nil)

phvalue name got line start count rest =
(if (if rest (== (head (head rest)) ' ') nil)
  (phvalue name (append got line) (head rest) (head rest) 0 (tail rest))
  (cons (cons name (append got line)) (parse_headers rest)))

//==================================================================================================
// http::get_header name lst
//
// Retrieves the value of a named header from a set of headers obtained from a HTTP message. The
// name argument must be in lower-case; since all the header names are converted to lower-case
// during parsing. If the named header is not found, this function returns nil.
//==================================================================================================

get_header name lst =
(if lst
  (letrec
    hdr = (head lst)
   in
    (if (streq (head hdr) name)
      (tail hdr)
      (get_header name (tail lst))))
  nil)

//==================================================================================================
// http::dechunk stream
//
// Decodes a data stream which is encoded using the "chunked" HTTP transfer-encoding scheme. This
// scheme represents data as a series of chunks, each of which consists a length and body. It is
// used when the server wants to send data incremenetally and does not initially know what the
// length of the response will be.
//
// This function is called by http::parse_message if the Transfer-Encoding header is set to "chunked"
//==================================================================================================

dechunk stream =
(dechunk_len stream stream 0)

dechunk_len stream start !count =
(if (== (head stream) '\r')
  (letrec
    chunklen = (util::parsehex (prefix count start))
    chunkdata = (tail (tail stream))
    next = (skip (+ chunklen 2) chunkdata)
   in
    (if (== chunklen 0)
      nil
      (append (prefix chunklen chunkdata)
        (dechunk_len next next 0))))
  (dechunk_len (tail stream) start (+ count 1)))
