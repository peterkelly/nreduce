module compile
imports xquery elc ws libstratego-lib libstratego-xtc xml-xtc-tools

rules

/* ---------------------------- Node constructors ------------------------------------- */

E : DirAttribute(UQName(n),vs) -> |{ (xml::mknpattr ns_  "" ~s:n ~vs) }|
// FIXME: default xmlns
E : DirAttribute(PQName(n1,n2),vs) -> |{ (xml::mknpattr ns_#n1 ~s:n1 ~s:n2 ~vs) }|
    where not(<equal>(n1,"xmlns"))
E : DirAttribute(PQName("xmlns",n),s) -> |{ (xml::mknamespace ~s ~s:n) }|

E : AttrValues(x) -> <foldr(!Nl(),\(e1,e2) -> |{ (++ (xq::consimple e1) e2) }|\)>x
E : DirElemContents(x) -> <toappendlist>x

E : |[ comment { e } ]|           -> |{ (cons (xml::mkcomment (xq::consimple e)) nil) }|

E : |[ attribute n1:n2 { e } ]|   -> |{ (cons (xml::mknpattr ns_#n1  ~s:n1 ~s:n2
                                                (xq::consimple e)) nil)   }|
E : |[ attribute { e1 } { e2 } ]| -> |{ (xq::compattr e1 e2 namespaces) }|
E : |[ text { e } ]|              -> |{ (xq::comptext e) }|

// Direct elements and computed elements with a fixed name
E : |[ <n1:n2 a*> ~e </n1:n2> ]|  ->
    |{ (cons (letrec content = e
                     attrs = (++ e1 (xq::get_attributes content))
                     children = (xq::get_children content)
              in (xml::mknpelem ns_#n1 "n1" "n2" attrs e2
                   (xq::concomplex children))) nil) }|
where e1 := <filter(not(isnsattr)); toconslist>a*;
      e2 := <filter(isnsattr); toconslist>a*

isnsattr = ?DirAttribute(PQName("xmlns",_),_) <+
           ?DirAttribute(UQName("xmlns"),_)

// Elements with a computed name
E : |[ element { e1 } { e2 } ]|   ->
    |{ (cons (letrec qname = (xq::consimple e1)
                     nsuri = (xq::resolve nsprefix namespaces)
                     nsprefix = (xml::getnsprefix qname)
                     alocalname = (xml::getlocalname qname)
                     content = e2
                     attributes = (xq::get_attributes content)
                     children = (xq::get_children content)
              in (xml::mknpelem nsuri nsprefix alocalname
                   attributes nil (xq::concomplex children))) nil) }|

/* ---------------------------- Expressions ------------------------------------------- */

// FIXME: support type declaration
E : |[ for $n in e1 return e2 ]|  -> |{ (xq::foreach e1 (!n.e2)) }|
E : |[ for $n1 at $n2 in e1 return e2 ]| -> |{ (xq::foreachpos e1 1 (!n1.!n2.e2)) }|

E : |[ let $x as ~t := e1 return e2 ]| -> |[ let $x := e1 return e2 ]|
E : |[ let $n := e1 return e2 ]|   -> |{ (letrec n = e1 in e2) }|

E : |[ $n ]|                      -> |{ n }|
E : FunctionName(UQName(n))       -> |{ n }|



E : |[ declare default element namespace s; ]|
                                  -> |{ ns_ = s }|
E : |[ declare default function namespace s; ]|
                                  -> |{ fun_ns = s }|
E : |[ declare namespace n = s; ]|
                                  -> |{ ns_#n = s }|
E : |[ declare variable $n := e; ]|
                                  -> |{ n = e }|

E : |[ declare variable $n external; ]|
                                  -> |{ n = (cons
                                              (xml::parsexml 1
                                                (readb s))
                                              nil) }|
  where <concat-strings>["external/",n,".xml"] => s

E : ConcatSymbol(x1,x2) -> <conc-strings>(x1,x2)

E : Enclosed(e) -> e

E : ForwardAxisStep(e) -> e
E : ReverseAxisStep(e) -> Call(FunctionName(UQName("xq::fn_reverse")),[e])

E : |[ e1[e2] ]|                  -> |{ (xq::filter3
                                          (!citem.!cpos.!csize.
                                            (xq::predicate_match cpos e2))
                                        e1) }|

E : NameTest(Wildcard1())         -> |{ (!pnk.xq::type_test pnk) }|
E : NameTest(Wildcard2(n))        -> |{ (!pnk.xq::wildcard_localname_test pnk ns_#n) }|
E : NameTest(Wildcard3(s))        -> |{ (!pnk.xq::wildcard_uri_test pnk s) }|
E : NameTest(UQName(n))           -> |{ (!pnk.xq::name_test pnk ns_ ~s:n) }|
E : NameTest(PQName(n1,n2))       -> |{ (!pnk.xq::name_test pnk ns_#n1 ~s:n2) }|

E : |[ document-node() ]|         -> |{ (!pnk.(xq::type_test xml::TYPE_DOCUMENT)) }|
E : |[ element() ]|               -> |{ (!pnk.(xq::type_test xml::TYPE_ELEMENT)) }|
E : |[ attribute() ]|             -> |{ (!pnk.(xq::type_test xml::TYPE_ATTRIBUTE)) }|
E : |[ comment() ]|               -> |{ (!pnk.(xq::type_test xml::TYPE_COMMENT)) }|
E : |[ text() ]|                  -> |{ (!pnk.(xq::type_test xml::TYPE_TEXT)) }|
E : |[ processing-instruction() ]|
                                  -> |{ (!pnk.(xq::type_test xml::TYPE_PI)) }|
E : |[ node() ]|                  -> |{ (!pnk.!node.1) }|

E : |[ self::t ]|                 -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (cons citem nil)) }|
E : |[ child::t ]|                -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (xml::item_children citem)) }|
E : |[ descendant::t ]|           -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (xq::node_descendants citem)) }|
E : |[ descendant-or-self::t ]|   -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (cons citem (xq::node_descendants citem))) }|
E : |[ parent::t ]|               -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (xq::node_parent_list citem)) }|
E : |[ ancestor::t ]|             -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (xq::node_ancestors citem)) }|
E : |[ ancestor-or-self::t ]|     -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (xq::node_ancestors_or_self citem)) }|
E : |[ preceding-sibling::t ]|    -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (xq::node_preceding_siblings citem)) }|
E : |[ following-sibling::t ]|    -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (xq::node_following_siblings citem)) }|
E : |[ preceding::t ]|            -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (xq::node_preceding citem)) }|
E : |[ following::t ]|            -> |{ (filter (t xml::TYPE_ELEMENT)
                                          (xq::node_following citem)) }|
E : |[ attribute::t ]|            -> |{ (filter (t xml::TYPE_ATTRIBUTE)
                                          (xml::item_attributes citem)) }|

// FIXME: sort, but only where appropriate
//E : |[ e1/e2 ]|                   -> |{ (xq::path_result_sort
//                                          (xq::foreach3 e1 (!citem.!cpos.!csize.e2))) }|
E : |[ e1/e2 ]|                   -> |{ (xq::foreach3 e1 (!citem.!cpos.!csize.e2)) }|

// Function calls
E : |[ e1() ]|                    -> |{ e1 }|
E : |[ e1(e2) ]|                  -> |{ e1 e2 }|
E : |[ e1(e2,e3*) ]|              -> |[ e1(e2)(e3*) ]|
    where <notempty>e3*

// Simple expressions
E : |[ . ]|                       -> |{ (cons citem nil) }|
E : |[ () ]|                      -> |{ nil }|
E : |[ e1 + e2 ]|                 -> |{ (xq::add e1 e2) }|
E : |[ e1 - e2 ]|                 -> |{ (xq::subtract e1 e2) }|
E : |[ e1 * e2 ]|                 -> |{ (xq::multiply e1 e2) }|
E : |[ e1 div e2 ]|               -> |{ (xq::divide e1 e2) }|
E : |[ e1 idiv e2 ]|              -> |{ (xq::idivide e1 e2) }|
E : |[ e1 mod e2 ]|               -> |{ (xq::mod e1 e2) }|
E : |[ e1 eq e2 ]|                -> |{ (xq::value_eq e1 e2) }|
E : |[ e1 ne e2 ]|                -> |{ (xq::value_ne e1 e2) }|
E : |[ e1 lt e2 ]|                -> |{ (xq::value_lt e1 e2) }|
E : |[ e1 le e2 ]|                -> |{ (xq::value_le e1 e2) }|
E : |[ e1 gt e2 ]|                -> |{ (xq::value_gt e1 e2) }|
E : |[ e1 ge e2 ]|                -> |{ (xq::value_ge e1 e2) }|
E : |[ e1 = e2 ]|                 -> |{ (cons (xml::mkbool (xq::general_eq e1 e2)) nil) }|
E : |[ e1 != e2 ]|                -> |{ (cons (xml::mkbool (xq::general_ne e1 e2)) nil) }|
E : |[ e1 < e2 ]|                 -> |{ (cons (xml::mkbool (xq::general_lt e1 e2)) nil) }|
E : |[ e1 <= e2 ]|                -> |{ (cons (xml::mkbool (xq::general_le e1 e2)) nil) }|
E : |[ e1 > e2 ]|                 -> |{ (cons (xml::mkbool (xq::general_gt e1 e2)) nil) }|
E : |[ e1 >= e2 ]|                -> |{ (cons (xml::mkbool (xq::general_ge e1 e2)) nil) }|
E : |[ if (e1) then e2 else e3 ]| -> |{ (if (xq::ebv e1) e2 e3) }|
E : |[ e1, e2 ]|                  -> |{ (++ e1 e2) }|
E : |[ e1 to e2 ]|                -> |{ (xq::xqrange (xq::getnumber e1) (xq::getnumber e2)) }|
E : |[ -e ]|                      -> |{ (xq::uminus e) }|
E : |[ e1 and e2 ]|               -> |{ (cons (xml::mkbool (&& (xq::ebv e1) (xq::ebv e2))) nil) }|
E : |[ e1 or e2 ]|                -> |{ (cons (xml::mkbool (|| (xq::ebv e1) (xq::ebv e2))) nil) }|

E : |{ xq::fn_position }|         -> |{ (cons (xml::mknumber cpos) nil) }|
E : |{ xq::fn_last }|             -> |{ (cons (xml::mknumber csize) nil) }|

// Abbreviated steps

S1 : |[ @t ]|                     -> |[ attribute::t ]|
S1 : |[ .. ]|                     -> |[ parent::node() ]|
S1 : |[ e1/ /e2 ]|                -> |[ e1/descendant-or-self::node()/e2 ]|
S1 : |[ t ]|                      -> |[ child::t ]|
     where not(!t;?AttributeTest(_)); not(!t;?SchemaAttributeTest(_))
S1 : ForwardStepChild(AttributeTest(x))
                                  -> ForwardStep(AxisAttribute(),AttributeTest(x))
S1 : ForwardStepChild(SchemaAttributeTest(x))
                                  -> ForwardStep(AxisAttribute(),SchemaAttributeTest(x))

// Simplify XQuery expressions

simplify_xquery = S0 <+ S1

S0 : |[ <n a*/> ]|                -> |[ <n a*></n> ]|
S0 : |[ <n1:n2 a*/> ]|            -> |[ <n1:n2 a*></n1:n2> ]|
S0 : |[ element n { } ]|          -> |[ element n { () } ]|
S0 : |[ element n1:n2 { } ]|      -> |[ element n1:n2 { () } ]|
S0 : |[ element { e1 } { } ]|     -> |[ element { e1 } { () } ]|
S0 : |[ element n { e } ]|        -> |[ <n>{e}</n> ]|
S0 : |[ element n1:n2 { e } ]|    -> |[ <n1:n2>{e}</n1:n2> ]|
S0 : |[ attribute n { } ]|        -> |[ attribute n { () } ]|
S0 : |[ attribute n1:n2 { } ]|    -> |[ attribute n1:n2 { () } ]|
S0 : |[ attribute { e1 } { } ]|   -> |[ attribute { e1 } { () } ]|
S0 : |[ <n2 a*> ~e </n2> ]|       -> |[ <n1:n2 a*> ~e </n1:n2> ]|
                                     where n1 := ""
S0 : |[ attribute n2 { e } ]|     -> |[ attribute n1:n2 { e } ]|
                                     where n1 := ""

// Built-in functions with no parameters
S0 : |[ string() ]|                -> |[ string(.) ]|

//S1 : Call(x,p) -> Call(VarRef(x),p)
//  where not(!x;?VarRef(_))


// Convert a complex FLWOR expression into a nested set of simple FLWOR expressions
// (where each has only one for or one let)
// Note: We do not deal with order by yet

S1 : FLWOR(f,Some(Where(x)),o,b) -> FLWOR(f,None(),o,If(x,b,EmptySeq()))

S1 : FLWOR([p|rest],None(),o,b) ->
    FLWOR([p],None(),None(),FLWOR(rest,None(),o,b))
    where <notempty>rest

S1 : FLWOR([For([p|rest])],None(),o,b) ->
    FLWOR([For([p])],None(),None(), FLWOR([For(rest)],None(),o,b))
    where <notempty>rest

S1 : FLWOR([Let([p|rest])],None(),o,b) ->
    FLWOR([Let([p])],None(),None(),FLWOR([Let(rest)],None(),o,b))
    where <notempty>rest



/* ---------------------------- Misc -------------------------------------------------- */


//E : MainModule(_,Prolog([],[]),e) ->
//    Program([],[SComb("query",["citem","cpos","csize"],e)])
//E : MainModule(_,Prolog([],[x|y]),e) ->
//    Program([],<conc>([x|y],[SComb("query",["citem","cpos","csize"],e)]))

E : MainModule(_,Prolog(a,b),e) ->
    Program([],<concat>[a,b,[SComb("query",["citem","cpos","csize"],e)]])

E : Integer(n) -> App(App(Sym("cons"),App(Sym("xml::mknumber"),Number(n))),Nl())
E : Decimal(n) -> App(App(Sym("cons"),App(Sym("xml::mknumber"),Number(n))),Nl())
E : Double(n) -> App(App(Sym("cons"),App(Sym("xml::mknumber"),Number(n))),Nl())
E : String(Chars(n)) -> App(App(Sym("cons"),App(Sym("xml::mkstring"),Str(n))),Nl())
E : AttrString(n) -> App(App(Sym("cons"),App(Sym("xml::mkstring"),Str(n))),Nl())

E : LCurly() -> String(Chars("{"))
E : RCurly() -> String(Chars("}"))

E : Function(x,p,_,e) -> SComb(x,p,e)
E : Param(VarName(UQName(n)),t) -> n

E : Text(s) -> App(App(Sym("cons"),App(Sym("xml::mktext"),Str(<escape>s))),Nl())


/* ---------------------------- Optimisation and simplification ----------------------- */

// ELC code optimisation (XQuery-specific)

OX : |{ (xq::consimple (cons (xml::mkstring e) nil)) }| -> |{ e }|
OX : |{ (xq::consimple nil) }| -> |{ nil }|
OX : |{ (xq::ebv (cons (xml::mkbool e) nil)) }| -> |{ e }|

/*
OX : |{ (x
          (cons (xml::mknumber e1) nil)
          (cons (xml::mknumber e2) nil)) }| -> |{ (cons (xml::mknumber (+ e1 e2)) nil) }|

OX : |{ (xq::general_eq
          (cons (xml::mknumber e1) nil)
          (cons (xml::mknumber e2) nil)) }| -> |{ (== e1 e2) }|
*/

// ELC code optimisation (general)

O1 : |{ (if e1 (x e2 nil) (x e3 nil)) }| -> |{ (x (if e1 e2 e3) nil) }|
O1 : |{ (if e1 (x e2) (x e3)) }| -> |{ (x (if e1 e2 e3)) }|

O1 : |{ (filter (!x.1) e) }|      -> |{ e }|

O1 : |{ (++ nil e) }|             -> |{ e }|
O1 : |{ (++ (++ e1 e2) e3) }|     -> |{ ++ e1 (++ e2 e3) }|
O1 : |{ (++ (cons e1 e2) e3) }|   -> |{ (cons e1 (++ e2 e3)) }|

O1 : |{ (++ s nil) }|             -> |{ s }|
O1 : |{ (++ s1 s2) }|             -> |{ s3 }|
     where s3 := <conc-strings>(s1,s2)

fixapp1 : SComb(n,[],Str(x))      -> SCombConst(n,[],Str(x))
fixapp1 : SComb(n,[],Sym(x))      -> SCombConst(n,[],Sym(x))
fixapp1 : SComb(n,[],Number(x))   -> SCombConst(n,[],Number(x))
fixapp1 : SComb(n,[],Nl())        -> SCombConst(n,[],Nl())

fixapp1 : App(x,y)                -> ListApp([x,y])
fixapp1 : ListApp([ListApp(x),y]) -> ListApp(<conc>(x,[y]))
fixapp1 : Lambda(x,z)             -> ListLambda([Entry(x)],z)
  where not(!z;?Lambda(_,_)); not(!z;?ListLambda(_,_))
fixapp1 : Lambda(x,Lambda(y,z))   -> ListLambda([Entry(x),y],z)
fixapp1 : Lambda(x,ListLambda(y,z))
                                  -> ListLambda([Entry(x)|y],z)
fixapp2 : ListApp([Sym("cons"),x,Nl()])
                                  -> SmallApp([Sym("cons"),x,Nl()])
fixapp2 : ListApp([Sym(x)|args])  -> SmallApp([Sym(x)|args])
  where <map(?Sym(_) <+ ?Str(_) <+ ?Number(_) <+ ?Nl())>args
fixapp2 : SComb(x,y,ListApp(z))   -> SCombNB(x,y,ListApp(z))
fixapp2 : SComb(x,y,SmallApp(z))  -> SCombNB(x,y,ListApp(z))
fixapp3 : ListApp(x)              -> Parenthetical(ListApp(x))

addmain:
  Program(imports,funcs)   -> Program([Import("xq"),Import("xml")|imports],[m|funcs])
  where if <get-config>XQTS() then
          !|{ main args stdin = (xq::main args stdin query nil) }|
        else
          !|{ main args stdin = (xq::main args stdin query 1) }|
        end => m

buildns: [NamespaceDecl(s1,Chars(s2))|e] -> |{ (cons (cons s1 s2) e) }|
buildns: [] -> |{ nil }|


/* --------------------- Variable and function namespace consolidation ---------------- */

names_to_uris =
     NameToURI
  <+ (?|[ declare namespace n = s; ]| <+ ?|[ xmlns:n="s" ]|);
     rules(NameToURI: VarName(PQName(n,local)) -> VarName(RQName(s,local)));
     rules(NameToURI: FunctionName(PQName(n,local)) -> FunctionName(RQName(s,local)))
  <+ ?|[ declare default function namespace s; ]|;
     rules(NameToURI: FunctionName(UQName(local)) -> FunctionName(RQName(s,local)))
  <+ ?DirElemConstructor1(_,_); {| NameToURI: all(names_to_uris) |}
  <+ ?DirElemConstructor2(_,_,_,_); {| NameToURI: all(names_to_uris) |}
  <+ all(names_to_uris)

uris_to_names =
  (?|[ declare namespace n = s; ]| <+
   ?|[ declare default function namespace s; ]| <+
   ?|[ xmlns:n="s" ]|);
  where(new => proxy);
  rules(URIToName: VarName(RQName(s,n2)) -> VarName(UQName(name))
        where name := <concat-strings>[proxy,"_",n2]);
  rules(URIToName: FunctionName(RQName(s,n2)) -> FunctionName(UQName(name))
        where name := <concat-strings>[proxy,"_",n2])
  <+ all(uris_to_names)

StaticURIToName:
  FunctionName(RQName("http://www.w3.org/2005/xpath-functions",n2)) ->
  FunctionName(UQName(name))
    where name := <concat-strings>["xq::fn_",n2]

StaticURIToName:
  FunctionName(RQName("http://www.w3.org/2001/XMLSchema",n2)) ->
  FunctionName(UQName(name))
    where name := <concat-strings>["xq::xs_",n2]

fixvarnames =
  names_to_uris; uris_to_names; topdown(try(StaticURIToName)); topdown(try(URIToName))

/* ---------------------------- Unique variables names -------------------------------- */

rename = rec rn(
  RenameVar
  <+ |[ for $<id> in <rn> return <id> ]|;
     {| RenameVar: RenameFor; |[ for $<id> in <id> return <rn> ]| |}
  <+ |[ for $<id> at $<id> in <rn> return <id> ]|;
     {| RenameVar: RenameFor; |[ for $<id> at $<id> in <id> return <rn> ]| |}
  <+ |[ let $<id> := <rn> return <id> ]|;
     {| RenameVar: RenameLet; |[ let $<id> := <id> return <rn> ]| |}
  <+ all(rn))

RenameFor : |[ for $n1 in e1 return e2 ]| -> |[ for $n2 in e1 return e2 ]|
  where <newvar>n1 => n2

RenameFor : |[ for $n1 at $n3 in e1 return e2 ]| -> |[ for $n2 at $n4 in e1 return e2 ]|
  where <newvar>n1 => n2;
        <newvar>n3 => n4

RenameLet : |[ let $n1 := e1 return e2 ]| -> |[ let $n2 := e1 return e2 ]|
  where <newvar>n1 => n2

newvar : n1 -> n2
  where if <RenameVar>|[ $n1 ]| then new else !n1 end => n2;
        rules(RenameVar : |[ $n1 ]| -> |[ $n2 ]|)

addnamespaces(|e):
  Program(imports,funcs)   -> Program(imports,[n|funcs])
  where n := |{ namespaces = e }|

def_elem: Prolog(decls,r)         -> Prolog([defe|decls],r)
  where not(<some(?DefaultElemNS(_))>decls);
        defe := |[ declare default element namespace ""; ]|

def_fun: Prolog(decls,r)          -> Prolog([deff|decls],r)
  where not(<some(?DefaultFunNS(_))>decls);
        deff := |[ declare default function namespace "http://www.w3.org/2005/xpath-functions"; ]|

addns(|prefix,uri):
  Prolog(decls,r)         -> Prolog([def|decls],r)
  where not(<some(?NamespaceDecl(prefix,_))>decls);
        def := NamespaceDecl(prefix,Chars(uri))

addpredeclared =
  try(addns(|"xml","http://www.w3.org/XML/1998/namespace"));
  try(addns(|"xs","http://www.w3.org/2001/XMLSchema"));
  try(addns(|"xsi","http://www.w3.org/2001/XMLSchema-instance"));
  try(addns(|"fn","http://www.w3.org/2005/xpath-functions"));
  try(addns(|"local","http://www.w3.org/2005/xquery-local-functions"))

/* ---------------------------- Namespace variables ----------------------------------- */

isnsattr = ?DirAttribute(PQName("xmlns",_),_) <+ ?DirAttribute(UQName("xmlns"),_)

process_nsattrs(|attrs) =
  <filter(isnsattr)>attrs => nsattrs;
//  <filter(not(isnsattr))>attrs => regattrs;
  !attrs => regattrs;
  <map(nsattr2binding)>nsattrs => nsbindings;
  <map(nsattr2pair)>nsattrs => strings;
  <foldr(!|{ oldns }|,\(e1,e2) -> |{ (cons e1 e2) }|\)>strings => conslist;
  !Binding("namespaces",conslist) => newns;
  ![newns|nsbindings] => bindings;
  !(bindings,regattrs)

bind_nsdecls:
  DirElemConstructor2(x,DirAttributes(attrs),e,x) ->
  Letrec([Binding("oldns",Sym("namespaces"))],
  Letrec(bindings,DirElemConstructor2(x,DirAttributes(regattrs),e,x)))
  where process_nsattrs(|attrs) => (bindings,regattrs)

bind_nsdecls:
  DirElemConstructor1(x,DirAttributes(attrs)) ->
  Letrec([Binding("oldns",Sym("namespaces"))],
  Letrec(bindings,DirElemConstructor1(x,DirAttributes(regattrs))))
  where process_nsattrs(|attrs) => (bindings,regattrs)

nsattr2binding : DirAttribute(PQName("xmlns",prefix),e) ->
                 Binding(<conc-strings>("ns_",prefix),e)

nsattr2binding : DirAttribute(UQName("xmlns"),e) ->
                 Binding("ns_",e)

nsattr2pair : DirAttribute(PQName("xmlns",n),s) ->
                 |{ (cons ~s:n ns_#n) }|

nsattr2pair : DirAttribute(UQName("xmlns"),s) ->
                 |{ (cons "" ns_) }|


/* ---------------------------- Top-level strategies ---------------------------------- */

strategies

  get-wsdl =
    ? address
    ; where(pipe => p)
    ; fork(<stdout-to-pipe> p; <execvp> ("curl",["-s",address]))
    ; ?(pid, _)
    ; <stdin-from-pipe>p
    ; <xtc-parse-xml-info>stdin()
    ; where(<waitpid> pid ; (exited + signaled + stopped))

  wsdl-functions =
    ?(prefix,address);
    <get-wsdl>address;
    read-from;
    genws(|prefix)

findops : |[ import service namespace n = s; ]| -> |[ declare namespace n = s; ]|
          where rules(ServiceOps:+ [] -> <wsdl-functions>(n,s))

replaceops: Prolog(a,b) -> Prolog(a,<conc>(newfuns,b))
            where <concat><bagof-ServiceOps>[] => newfuns

  wsdlprocessing =
  topdown(try(findops))
; topdown(try(replaceops))

  main = io-wrap(Option("--simplify",
                        <set-config>(Simplify(),"on"),
                        !"--simplify       Just run XQuery simplification")+
                 Option("--xqts",
                        <set-config>(XQTS(),"on"),
                        !"--xqts       Set query options for XQTS usage"),
                 top)

  toconslist = foldr(!Nl(),\(e1,e2) -> |{ (cons e1 e2) }|\)
  toappendlist = foldr(!Nl(),\(e1,e2) -> |{ (++ e1 e2) }|\)

  notempty = ?[_|_]

  mknscons : (|[ declare namespace n1 = s1; ]|,e) -> |{ (cons (cons ~s:n1 n2) e) }|
             where <conc-strings>("ns_",n1) => n2

  findnamespaces =
  oncetd(?Prolog(decls,r); <filter(?NamespaceDecl(_,_))>decls => ns);
  <foldr(!|{ (cons (cons "" ns_) nil) }|,mknscons)>ns

  fixapp =
  innermost(fixapp1)
; innermost(fixapp2)
; bottomup(try(fixapp3))

  simplify =
    innermost(simplify_xquery)
  ; innermost(def_elem <+ def_fun) // Define default function/element namespace
  ; MainModule(id,addpredeclared,id)
  ; fixvarnames
  ; rename

  compile =
    where(findnamespaces => ns)    // Search for namespace declarations
  //; where(!ns; debug(!"got namespaces: "))
  ; bottomup(try(bind_nsdecls))
  ; topdown(try(repeat(E)))        // Main compilation routines
  ; innermost(OX)                  // ELC code optimisation (XQuery-specific)
  ; innermost(O1)                  // ELC code optimisation (general)
  ; addmain                        // Add main function
  ; addnamespaces(|ns)             // Add in-scope namespaces variable
  ; fixapp                         // Convert ELC constructs to pretty-print forms

  top =
  wsdlprocessing;
  if <get-config>Simplify() then
    simplify
  else
    simplify
  ; compile
  end

signature
  constructors
    Parenthetical : Unknown -> Unknown
    Entry      : Id -> Entry
    ListLambda : List(Entry) * Expression -> Expression
    SmallApp   : List(Expression) -> Expression
    ListApp    : List(Expression) -> Expression
    SCombNB : Id * List(Id) * Expression -> SComb
    ConcatSymbol     : Symbol * Symbol -> Symbol

    SCombConst   : Symbol * List(Symbol) * Expression -> SComb

    Simplify : Unknown
    XQTS : Unknown

    RQName     : String * NCName -> QName
