module ws
imports xquery xml-info libstratego-lib

rules

WA : Element(Name(Some("http://schemas.xmlsoap.org/wsdl/"),name),
            attrs,ch) -> Elem("wsdl",name,attrs,ch)
WA : Element(Name(Some("http://schemas.xmlsoap.org/wsdl/soap/"),name),
            attrs,ch) -> Elem("soap",name,attrs,ch)

// Simplify XML info structure to WSDL terms

WS : Document(x)                             -> x
WS : Elem("wsdl","types",_,ch)               -> Types(ch)
WS : Elem("wsdl","definitions",attrs,defs)   -> Definitions(tns,defs)
    where attr(|attrs,"targetNamespace") => tns;
          rules(TNS: [] -> tns)
WS : Elem("wsdl","portType",attrs,ops)       -> PortType(name,ops)
    where attr(|attrs,"name") => name
WS : Elem("wsdl","message",attrs,parts)      -> Message(<TNS>[],name,parts)
    where attr(|attrs,"name") => name
WS : Elem("wsdl","part",attrs,_)             -> Part(name,type)
  where attr(|attrs,"name") => name;
        attr(|attrs,"type") => type

WS : Elem("wsdl","operation",attrs,ch)       -> Operation(name,ip,op)
  where attr(|attrs,"name") => name;
        ip := MessageRef(<local><cattr(|ch,"wsdl","input","message")>);
        op := MessageRef(<local><cattr(|ch,"wsdl","output","message")>)

WS : Elem("wsdl","binding",attrs,ch)         -> Binding(name,pref,style)
  where name := <attr(|attrs,"name")>;
        pref := PortTypeRef(<local><attr(|attrs,"type")>);
        style := <cattr(|ch,"soap","binding","style")>

WS : Elem("wsdl","port",attrs,ch)            -> Port(name,bref,location)
  where name := <attr(|attrs,"name")>;
        bref := BindingRef(<local><attr(|attrs,"binding")>);
        location := <cattr(|ch,"soap","address","location")>

WS : Elem("wsdl","service",attrs,ports)      -> Service(name,ports)
    where name := <attr(|attrs,"name")>

attr(|attrs,name) =
  <one(?Attribute(Name(None(),name),value))>attrs; !value

cattr(|ch,ctype,cname,aname) =
  <one(?Elem(ctype,cname,attrs,_))>ch;
  attr(|attrs,aname)

// Set reference resolution rules

WR : Message(tns,name,parts) -> Message(tns,name,parts)
    where rules(WC : MessageRef(name) -> Message(tns,name,parts))

WR : PortType(name,operations) -> PortType(name,operations)
   where rules(WC : PortTypeRef(name) -> PortType(name,operations))

WR : Binding(name,portType,style) -> Binding(name,portType,style)
   where rules(WC : BindingRef(name) -> Binding(name,portType,style))

// Generate XQuery code

FunctionDef(|s1,s2,n1,n2,input,rt,e) =
    !|[ declare function n1:n2(~input) as ~rt {
         fn:post(s1,
                 <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
                   <soap:Body>
                     <msg:n2 xmlns:msg="s2">~e</msg:n2>
                   </soap:Body>
                 </soap:Envelope>)/ *:Envelope/ *:Body/node()/node()/node() }; ]|

WX(|n1) : OperationAddr(s1,n2,input,[Param(_,Some(TypeDeclaration(rt)))]) ->
     <FunctionDef(|s1,s2,n1,n2,input,rt,e)>
     where <map(genparam)>input => lst;
           <foldr(!|[ () ]|,\(e1,e2) -> |[ e1,e2 ]|\)>lst => e;
           <TNS>[] => s2

genparam : Param(VarName(UQName(n)),_) -> |[ <n>{$n}</n> ]|

WX(|n1) : Message(tns,name,parts) -> parts

WX(|n1) : Part(name,type) ->
    Param(VarName(UQName(name)),
          Some(TypeDeclaration(PQName(<prefix>type,<local>type))))

giveaddress =
  rec r(
    SetAddress
  <+ ?Port(_,Binding,addr);
     {| SetAddress: rules(SetAddress: Operation(n,i,o) -> OperationAddr(addr,n,i,o)); all(r) |}
  <+ all(r))

strategies
  wsmain = io-wrap(genwsfull)

setprefix(|p) : FunctionName(UQName(n)) -> FunctionName(PQName(p,n))

  genws(|prefix) =
  topdown(try(WA))         // convert namespace URIs to short names
; topdown(try(repeat(WS))) // simplify XML to WSDL ATerms
; topdown(try(WR))         // set reference resolution rules
; innermost(WC)            // apply reference resolution rules
; giveaddress              // set the address field of operations
; find(?Service(_,_))
; innermost(WX(|prefix))   // generate XQuery code
; find(?Function(_,_,_,_))
//; topdown(try(setprefix(|prefix)))

  genwsfull =
  genws(|"x")
; !MainModule(None(),Prolog([],<id>),EmptySeq())

  prefix = string-tokenize(|[':']); ?[name,_]; !name
  local = string-tokenize(|[':']); ?[_,name]; !name

  find(s) = s; ![<id>] <+ {c,p: ?c#(p); <map(find(s))>p; concat }

signature
constructors

  Definitions : Unknown * Unknown -> Unknown
  PortType : String * Unknown -> Unknown
  Message : String * String * Unknown -> Unknown
  Part : String * String -> Unknown
  Operation : String * String * String -> Unknown
  OperationAddr : String * String * String * String -> Unknown
  Binding : String * String * String -> Unknown
  Port : String * String * String -> Unknown
  Port2 : String * String * String * Unknown -> Unknown
  Service : String * Unknown -> Unknown
  Types : Unknown -> Unknown

  MessageRef : String -> Unknown
  PortTypeRef : String -> Unknown
  BindingRef : String -> Unknown
  Elem : String * String * Unknown * Unknown -> Unknown
